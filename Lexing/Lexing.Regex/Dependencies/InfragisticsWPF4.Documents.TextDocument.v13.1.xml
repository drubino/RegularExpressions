<?xml version="1.0"?>
<doc>
    <assembly>
        <name>InfragisticsWPF4.Documents.TextDocument.v13.1</name>
    </assembly>
    <members>
        <member name="T:Lexing.Regex
            <summary>
            Generates code to create a <see cref="T:Lexing.Regex
            </summary>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Generates code to create a
            <see cref="T:Lexing.Regex
            derived class based on an existing 
            <see cref="T:Lexing.Regex
            instance.
            </summary>
            <param name="grammar">
            The
            <see cref="T:Lexing.Regex
            from which to create the LanguageBase-derived class.
            </param>
            <param name="className">The name of the class.</param>
            <param name="supportsParsing">Boolean value which indicates whether the generated language supports parsing.</param>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Generates code to create a
            <see cref="T:Lexing.Regex
            derived class based on an existing 
            <see cref="T:Lexing.Regex
            instance.
            </summary>
            <param name="parameters">
            The
            <see cref="T:Lexing.Regex
            instance which defines the parameters of the language generation operation.
            </param>
        </member>
        <member name="T:Lexing.Regex
            <summary>
            Encapsulates the parameters available when generating a language class file using the
            <see cref="T:Lexing.Regex
            </summary>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Creates a new instance of the class.
            </summary>
            <param name="grammar">The grammar for which the language will be generated</param>
            <param name="className">The name of the class.</param>
            <param name="filename">The full path to the source file to be generated.</param>
            <param name="supportsParsing">A boolean value indicating whether the language supports parsing.</param>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Returns a reference to the associated
            <see cref="T:Lexing.Regex
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Returns or sets the name of the class to be generated.
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Returns or sets the namespace of the class to be generated.
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Returns or sets the text which appears in the summary
            tag of the documentation comments for the generated class.
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Returns or sets the full path to the source file to be generated.
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Returns or sets a boolean value indicating whether the language
            to be generated supports syntax parsing.
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Returns or sets the character encoding to be used when
            generating the language code file.
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Returns or sets a boolean value indicating whether the class
            to be generated will be marked as sealed.
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Returns or sets a boolean value indicating whether the class
            to be generated will be marked as partial.
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Returns or sets a boolean value indicating whether the class
            to be generated will be marked as public.
            </summary>
        </member>
        <member name="T:Lexing.Regex
            <summary>
            Exports an instance of the
            <see cref="T:Lexing.Regex
            class to a file or stream in EBNF (Extended Backus-Naur Form)
            format.
            </summary>
        </member>
        <member name="F:Lexing.Regex
            <summary>
            The string used to mark a grammar initialization special sequence ('Grammar').
            </summary>
        </member>
        <member name="F:Lexing.Regex
            <summary>
            The string used to mark a terminal symbol declaration special sequence ('TerminalSymbols').
            </summary>
        </member>
        <member name="F:Lexing.Regex
            <summary>
            The string used to mark a lexer state declaration special sequence ('LexerStates').
            </summary>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Exports the specified
            <see cref="T:Lexing.Regex
            instance to a text file, using ASCII encoding.
            </summary>
            <param name="grammar">
            The
            <see cref="T:Lexing.Regex
            to export.
            </param>
            <param name="path">
            Full path to the file to be created. Existing files are overwritten.
            </param>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Exports the specified
            <see cref="T:Lexing.Regex
            instance to a text file, using ASCII encoding.
            </summary>
            <param name="grammar">
            The
            <see cref="T:Lexing.Regex
            to export.
            </param>
            <param name="path">
            Full path to the file to be created. Existing files are overwritten.
            </param>
            <param name="categories">
            Bitflags which define which categories of the grammar are to be exported.
            </param>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Exports the specified
            <see cref="T:Lexing.Regex
            instance to a text file.
            </summary>
            <param name="grammar">
            The
            <see cref="T:Lexing.Regex
            to export.
            </param>
            <param name="path">
            Full path to the file to be created. Existing files are overwritten.
            </param>
            <param name="encoding">
            The text encoding.
            </param>
            <param name="categories">
            Bitflags which define which categories of the grammar are to be exported.
            </param>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Exports the specified
            <see cref="T:Lexing.Regex
            instance to the specified <paramref name="stream"/>, using ASCII encoding.
            </summary>
            <param name="grammar">
            The
            <see cref="T:Lexing.Regex
            to export.
            </param>
            <param name="stream">
            The stream to which the output is directed.
            Caller is responsible for closing and disposing of the stream.
            </param>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Exports the specified
            <see cref="T:Lexing.Regex
            instance to the specified <paramref name="stream"/>.
            </summary>
            <param name="grammar">
            The
            <see cref="T:Lexing.Regex
            to export.
            </param>
            <param name="stream">
            The stream to which the output is directed.
            Caller is responsible for closing and disposing of the stream.
            </param>
            <param name="encoding">
            The text encoding.
            </param>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Exports the specified
            <see cref="T:Lexing.Regex
            instance to the specified <paramref name="stream"/>.
            </summary>
            <param name="grammar">
            The
            <see cref="T:Lexing.Regex
            to export.
            </param>
            <param name="stream">
            The stream to which the output is directed.
            Caller is responsible for closing and disposing of the stream.
            </param>
            <param name="encoding">
            The text encoding.
            </param>
            <param name="categories">
            Bitflags which define which categories of the grammar are to be exported.
            </param>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Converts the specified string to the equivalent numeric XML escape codes
            </summary>
            <param name="value">The string value to convert</param>
            <param name="hexadecimal">A boolean value indicating whether the character codes are represented in hexadecimal format.</param>
        </member>
        <member name="T:Lexing.Regex
            <summary>
            Defines which categories of a
            <see cref="T:Lexing.Regex
            are exported.
            </summary>
        </member>
        <member name="F:Lexing.Regex
            <summary>
            No operation.
            </summary>
        </member>
        <member name="F:Lexing.Regex
            <summary>
            The Grammar properties section is exported.
            Use this flag to export the properties of the
            <see cref="T:Lexing.Regex
            </summary>
        </member>
        <member name="F:Lexing.Regex
            <summary>
            Declarations of
            <see cref="T:Lexing.Regex
            are exported.
            </summary>
        </member>
        <member name="F:Lexing.Regex
            <summary>
            Declarations of
            <see cref="T:Lexing.Regex
            are exported.
            </summary>
        </member>
        <member name="F:Lexing.Regex
            <summary>
            Declarations of
            <see cref="T:Lexing.Regex
            are exported.
            </summary>
        </member>
        <member name="F:Lexing.Regex
            <summary>
            Combines the GrammarProperties, TerminalSymbolDeclarations, NonTerminalSymbolDeclarations, and LexerStateDeclarations flags.
            </summary>
        </member>
        <member name="T:Lexing.Regex
            <summary>
            Represents the types of warnings which can occur when analyzing a <see cref="T:Lexing.Regex
            </summary>
            <seealso cref="M:Lexing.Regex
        </member>
        <member name="F:Lexing.Regex
            <summary>
            An ambiguity will occur if the parser is in a certain state and a specific token is processed, which could impact performance.
            </summary>
        </member>
        <member name="F:Lexing.Regex
            <summary>
            A non-terminal symbol or a significant terminal symbol cannot be used in the parse tree because it is not directly or indirectly referenced
            by the start symbol of the Grammar.
            </summary>
        </member>
        <member name="T:Lexing.Regex
            <summary>
            Constants which describe the language element of tokens produced by the associated
            <see cref="T:Lexing.Regex
            </summary>
        </member>
        <member name="F:Lexing.Regex
            <summary>
            No language element is specified.
            </summary>
        </member>
        <member name="F:Lexing.Regex
            <summary>
            Tokens produced by this terminal symbol are not semantically significant
            to the associated grammar.
            </summary>
        </member>
        <member name="F:Lexing.Regex
            <summary>
            Tokens produced by this terminal symbol represent newlines.
            Note that a terminal symbol with this value always the regular expression pattern defined by the
            <see cref="P:Lexing.Regex
            to tokenize content. 
            </summary>
        </member>
        <member name="F:Lexing.Regex
            <summary>
            Tokens produced by this terminal symbol represent whitespace characters
            such as the space character or tab character. This value is used by the
            <see cref="P:Lexing.Regex
            but can be used by any terminal symbol; tokens generated by such symbols
            are considered to be semantically insignificant to the associated grammar.
            </summary>
        </member>
        <member name="F:Lexing.Regex
            <summary>
            Tokens produced by this terminal symbol represent reserved keywords.
            </summary>
        </member>
        <member name="F:Lexing.Regex
            <summary>
            Tokens produced by this terminal symbol represent context-sensitive keywords,
            i.e., can be either a keyword or identifier depending on the usage.
            </summary>
        </member>
        <member name="F:Lexing.Regex
            <summary>
            Tokens produced by this terminal symbol represent identifiers.
            </summary>
        </member>
        <member name="F:Lexing.Regex
            <summary>
            Tokens produced by this terminal symbol represent a string or character literal.
            </summary>
        </member>
        <member name="F:Lexing.Regex
            <summary>
            Tokens produced by this terminal symbol represent a numeric literal.
            </summary>
        </member>
        <member name="F:Lexing.Regex
            <summary>
            Tokens produced by this terminal symbol represent a date/time literal.
            </summary>
        </member>
        <member name="F:Lexing.Regex
            <summary>
            Tokens produced by this terminal symbol represent mathematical,
            relational, or logical operators, such as +, -, >, |, etc.
            </summary>
        </member>
        <member name="F:Lexing.Regex
            <summary>
            Tokens produced by this terminal symbol represent punctuation
            symbols such as a semicolon, parentheses, braces, etc.
            </summary>
        </member>
        <member name="F:Lexing.Regex
            <summary>
            Tokens produced by this terminal symbol represent preprocessor directives,
            i.e., '#region', '#if', '#else', '#endif', etc.
            </summary>
        </member>
        <member name="F:Lexing.Regex
            <summary>
            Tokens produced by this terminal symbol represent text within a preprocessor directive.
            </summary>
        </member>
        <member name="F:Lexing.Regex
            <summary>
            Tokens produced by this terminal symbol represent the continuation of a logical line. They will cause an 
            immediately following LineTerminator token to be skipped.
            </summary>
        </member>
        <member name="F:Lexing.Regex
            <summary>
            Tokens produced by this terminal symbol represent unrecognized content.
            </summary>
        </member>
        <member name="F:Lexing.Regex
            <summary>
            Tokens produced by this terminal symbol represent the beginning
            of an XML documentation comment line.
            </summary>
        </member>
        <member name="F:Lexing.Regex
            <summary>
            Tokens produced by this terminal symbol represent the
            text within an XML documentation comment.
            </summary>
        </member>
        <member name="F:Lexing.Regex
            <summary>
            Tokens produced by this terminal symbol represent the
            tags within an XML documentation comment.
            </summary>
        </member>
        <member name="F:Lexing.Regex
            <summary>
            Tokens produced by this terminal symbol represent the end marker for a logical line unless they are
            immediately preceded by a LineContinuation token.
            </summary>
        </member>
        <member name="F:Lexing.Regex
            <summary>
            Reserved for the
            <see cref="P:Lexing.Regex
            </summary>
        </member>
        <member name="T:Lexing.Regex
            <summary>
            Indicates the severity of a parse error.
            </summary>
        </member>
        <member name="F:Lexing.Regex
            <summary>
            The error is incorrect and the document cannot be used until it is fixed.
            </summary>
        </member>
        <member name="F:Lexing.Regex
            <summary>
            The error is a warning for something that might not have been intended by the user.
            </summary>
        </member>
        <member name="F:Lexing.Regex
            <summary>
            The error is information to indicate something to the user.
            </summary>
        </member>
        <member name="T:Lexing.Regex
            <summary>
            Returned by the filter Func passed into the <see cref="M:Lexing.Regex
            </summary>
        </member>
        <member name="F:Lexing.Regex
            <summary>
            Do not return this node but include its descendant nodes.
            </summary>
        </member>
        <member name="F:Lexing.Regex
            <summary>
            Do not return this node or any of its descendant nodes.
            </summary>
        </member>
        <member name="F:Lexing.Regex
            <summary>
            Return this node but not any of its descendant nodes.
            </summary>
        </member>
        <member name="F:Lexing.Regex
            <summary>
            Return this node and its descendant nodes.
            </summary>
        </member>
        <member name="T:Lexing.Regex
            <summary>
            Represents the types of rules which which determine whether a <see cref="T:Lexing.Regex
            text being parsed.
            </summary>
            <seealso cref="P:Lexing.Regex
            <seealso cref="P:Lexing.Regex
        </member>
        <member name="F:Lexing.Regex
            <summary>
            An empty set of symbols. This rule succeed by matching nothing from the document.
            </summary>
        </member>
        <member name="F:Lexing.Regex
            <summary>
            An excption rule. This rule can only succeed if its sub-rule matches content and the exception rule does not succeed for the same content.
            </summary>
        </member>
        <member name="F:Lexing.Regex
            <summary>
            A symbol reference rule. The symbol associated with the rule must be found in the document for the rule is succeed.
            </summary>
        </member>
        <member name="F:Lexing.Regex
            <summary>
            A logical 'or' is applied between each of the sub-rules. One of the sub-rules must succeed for the alternation rule to succeed.
            </summary>
        </member>
        <member name="F:Lexing.Regex
            <summary>
            The sub-rules are logically concatenated. Each sub-rule must succeed in order for the concatenation rule to succeed.
            </summary>
        </member>
        <member name="F:Lexing.Regex
            <summary>
            The sub-rule may or may not succeed. Either way, the optional rule will succeed.
            </summary>
        </member>
        <member name="F:Lexing.Regex
            <summary>
            The sub-rule can be repeated zero or more times for the repetition rule to succeed.
            </summary>
        </member>
        <member name="T:Lexing.Regex
            <summary>
            Constants which describe whether a non-terminal <see cref="T:Lexing.Regex
            produced when a document is parsed.
            </summary>
            <remarks>
            <p class="body">
            The term "pruning" refers to the process of removing non-terminal syntax nodes which, for whatever reason, are not considered 
            important to the consumer of the syntax tree.
            </p>
            <p class="body">
            Terminal nodes are never removed from a syntax tree, since they always represent significant content.
            </p>
            <p class="body">
            Child nodes of non-terminal nodes which are pruned from the tree become immediate children of the first ancestor node that is 
            not pruned.
            </p>
            <p class="body">
            By default, non-terminal nodes which have only one child, where that child is itself a non-terminal node, do not appear in the 
            syntax tree. Non-terminal nodes whose name is prefixed with an underscore ('_') also do not appear. This is the equivalent of 
            the BasedOnChildrenAndName value.
            </p>
            <p class="body">
            Pruning can be overridden on individual non-terminal symbols by setting their <see cref="P:Lexing.Regex
            value to True, or in EBNF by marking a non-terminal definition with a special sequence like this: "?&lt;PreventPruning/&gt;?"
            </p>
            </remarks>
            <seealso cref="P:Lexing.Regex
        </member>
        <member name="F:Lexing.Regex
            <summary>
            All non-terminal nodes appear in the tree.
            </summary>
        </member>
        <member name="F:Lexing.Regex
            <summary>
            Non-terminal syntax nodes which have zero children or only one child, where that child is itself a non-terminal syntax node, are not included in
            the syntax tree.
            </summary>
        </member>
        <member name="F:Lexing.Regex
            <summary>
            Non-terminal syntax nodes which are associated with a <see cref="T:Lexing.Regex
            are considered to be used internally for the purpose of grouping certain constructs, and do not appear in the syntax tree.
            </summary>
        </member>
        <member name="F:Lexing.Regex
            <summary>
            Combines the BasedOnChildren and BasedOnName values. This is the default value for <see cref="P:Lexing.Regex
            </summary>
        </member>
        <member name="T:Lexing.Regex
            <summary>
            Constants which determine the manner in which a terminal
            symbol's value is compared to values in the compilation
            source.
            </summary>
        </member>
        <member name="F:Lexing.Regex
            <summary>
            The value associated with the symbol is a literal string.
            The syntax parser will compare values in the compilation
            target with the associated value and generate an error if
            the values do not match exactly. The comparison under this
            setting is case-sensitive.
            </summary>
        </member>
        <member name="F:Lexing.Regex
            <summary>
            Same as the 'Literal' setting, except that character casing
            is ignored for the string comparisons.
            </summary>
        </member>
        <member name="F:Lexing.Regex
            <summary>
            The value associated with the symbol is implied to be a regular
            expression pattern. The
            <a href="http://msdn.microsoft.com/en-us/library/system.text.regularexpressions.regex.aspx">System._Text.RegularExpressions.Regex</a>
            class is used to determine whether values in the compilation target
            match the pattern assigned to the terminal symbol's value.
            </summary>
        </member>
        <member name="T:Lexing.Regex
            <summary>
            Represents a context-free grammar whose production rules are used to parse and validate textual input.
            </summary>
            <remarks>
            <p class="body">
            The syntax of a language is defined by its grammar. This formal definition provides a way to define what constitutes
            a legal sequence of characters in a concise, recursive manner.
            </p>
            <p class="body">
            The main components of a grammar definition are represented by the <see cref="T:Lexing.Regex
            <see cref="T:Lexing.Regex
            </p>
            <p class="body">
            A TerminalSymbol represents the specific character pattern which must be matched in order for the corresponding rule to be satisfied. 
            For example, a TerminalSymbol for the string "class" would evaluate the input string and signify success if it begins with "class", 
            and signify failure if it does not. More complex evaluations are made possible through the use of regular expression patterns.
            </p>
            <p class="body">
            A NonTerminalSymbol represents a zero or more symbols, which can either be TerminalSymbols or NonTerminalSymbols. In addition, it can
            represent multiple sets of symbols. For example, let's say "class" is defined as a TerminalSymbol and a NonTerminalSymbol is defined in an 
            EBNF file as "Classes = class | (Classes, class);" This indicates that. This means that for a "Classes" NonTerminalSymbol to be recognized 
            in a parsed document, there must be either a "class" TerminalSymbol or a "Classes" NonTerminalSymbol followed by a "class" TerminalSymbol.
            In the latter, the nested "Classes" symbol could also either represent a "class" TerminalSymbol or a "Classes" NonTerminalSymbol followed 
            by a "class" TerminalSymbol. Therefore, "Classes" represents one or more "class" TerminalSymbols.
            </p>
            <p class="body">
            The rules which define what can be represented by a NonTerminalSymbol are specified with the <see cref="P:Lexing.Regex
            value or by defining the symbols in an EBNF file and using the <see cref="M:Lexing.Regex
            </p>
            </remarks>
            <seealso cref="M:Lexing.Regex
        </member>
        <member name="F:Lexing.Regex
            <summary>
            The default regular expression pattern used to identify whitespace characters other than newlines: [ \t]+
            </summary>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Creates a new instance of the
            <see cref="T:Lexing.Regex
            class.
            </summary>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Returns the string representation of this object.
            </summary>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            For generated language class usage only.
            </summary>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Analyzes the <see cref="T:Lexing.Regex
            </summary>
            <remarks>
            <p class="note">
            <b>Note:</b> the Grammar symbols and rules should be fully initialized before analysis because the Grammar will be immutable after it is
            analyzed.
            </p>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the <see cref="P:Lexing.Regex
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Occurs when there are no terminal symbols in the <see cref="P:Lexing.Regex
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Occurs when a <see cref="T:Lexing.Regex
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Occurs when a <see cref="T:Lexing.Regex
            which is not initialized correctly.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the start symbol never directly or indirectly references a terminal symbol.
            </exception>
            <returns>A <see cref="T:Lexing.Regex
            <seealso cref="P:Lexing.Regex
            <seealso cref="P:Lexing.Regex
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Creates a mutable copy of the <see cref="T:Lexing.Regex
            </summary>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Gets the <see cref="T:Lexing.Regex
            </summary>
            <remarks>
            <p class="note">
            <b>Note:</b> The <paramref name="name"/> and <see cref="P:Lexing.Regex
            </p>
            </remarks>
            <param name="name">The name of the symbol to get.</param>
            <exception cref="T:System.ArgumentNullException">
            Occurs when the <paramref name="name"/> is null or empty.
            </exception>
            <returns>A Symbol instance in the Grammar whose Name matches the <paramref name="name"/>.</returns>
            <seealso cref="P:Lexing.Regex
            <seealso cref="P:Lexing.Regex
            <seealso cref="P:Lexing.Regex
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Attempts to create a <see cref="T:Lexing.Regex
            </summary>
            <param name="ebnf">
            A string containing the EBNF (Extended Backus-Naur Form) content.
            </param>
            <returns>
            An <see cref="T:Lexing.Regex
            to the created Grammar instance if there were no errors.
            </returns>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Attempts to create a <see cref="T:Lexing.Regex
            </summary>
            <param name="filename">
            A string containing the full path to the EBNF (Extended Backus-Naur Form) file.
            </param>
            <param name="encoding">
            The character encoding used in the file.
            </param>
            <returns>
            An <see cref="T:Lexing.Regex
            to the created Grammar instance if there were no errors.
            </returns>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Clears all data in the <see cref="T:Lexing.Regex
            </summary>
            <param name="source">The instance from which the Grammar is to be initialized.</param>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="source"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Occurs when <paramref name="source"/> is equal to the Grammar on which InitializeFrom is called.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the target Grammar is immutable.
            </exception>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            For generated language class usage only.
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets a <see cref="T:Lexing.Regex
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets or sets the name that is used to reference the <see cref="P:Lexing.Regex
            </summary>
            <remarks>
            <p class="body">
            This can be used to get the symbol from the <see cref="P:Lexing.Regex
            even though the collection does not contain built-in symbols.
            </p>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the value is set and <see cref="P:Lexing.Regex
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Occurs when the specified name is null or empty.
            </exception>
            <exception cref="T:System.ArgumentException">
            Occurs when the specified name matches that of another symbol in the <see cref="T:Lexing.Regex
            </exception>
            <seealso cref="P:Lexing.Regex
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets the value indicating whether the <see cref="T:Lexing.Regex
            </summary>
            <remarks>
            <p class="body">
            A Grammar will become immutable the first time it is used to perform lexical or syntax analysis on a document.
            </p>
            <p class="body">
            If the Grammar is immutable, certain operations will cause an <see cref="T:System.InvalidOperationException"/>:
            <ul>
            <li>Calling <see cref="M:Lexing.Regex
            <li>Setting the <see cref="P:Lexing.Regex
            <li>Adding or removing items in the <see cref="P:Lexing.Regex
            <li>Modifying a <see cref="T:Lexing.Regex
            <li>Modifying a <see cref="T:Lexing.Regex
            <li>Modifying a <see cref="T:Lexing.Regex
            <li>Adding, removing, or modifying syntax rules of a NonTerminalSymbol belonging to the Grammar</li>
            </ul>
            </p>
            <p class="body">
            Once a Grammar becomes immutable, it cannot become mutable again. However, a mutable copy of the Grammar can be created using the <see cref="M:Lexing.Regex
            </p>
            <p class="body">
            The <see cref="P:Lexing.Regex
            </p>
            </remarks>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets the collection of the <see cref="T:Lexing.Regex
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets or sets a name for this grammar definition.
            </summary>
            <remarks>
            <p class="body">
            The Name can be set regardless of the <see cref="P:Lexing.Regex
            </p>
            </remarks>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets a <see cref="T:Lexing.Regex
            </summary>
            <remarks>
            <p class="body">
            To assign a name to the symbol, set the <see cref="P:Lexing.Regex
            from the <see cref="P:Lexing.Regex
            built-in symbols.
            </p>
            </remarks> 
            <seealso cref="P:Lexing.Regex
            <seealso cref="P:Lexing.Regex
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets or sets the name that is used to reference the <see cref="P:Lexing.Regex
            </summary>
            <remarks>
            <p class="body">
            This can be used to get the symbol from the <see cref="P:Lexing.Regex
            even though the collection does not contain built-in symbols.
            </p>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the value is set and <see cref="P:Lexing.Regex
            </exception>
            <exception cref="T:System.ArgumentException">
            Occurs when the specified name matches that of another symbol in the <see cref="T:Lexing.Regex
            </exception>
            <seealso cref="P:Lexing.Regex
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets a collection of <see cref="T:Lexing.Regex
            symbols in a document.
            </summary>
            <remarks>
            <p class="body">
            Each <see cref="T:Lexing.Regex
            corresponds to a NonTerminalSymbol in the <see cref="T:Lexing.Regex
            </p>
            </remarks>
            <seealso cref="P:Lexing.Regex
            <seealso cref="P:Lexing.Regex
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets or sets a the <see cref="T:Lexing.Regex
            of the <see cref="T:Lexing.Regex
            </summary>
            <remarks>
            <p class="body">
            The StartSymbol property must be set to a non-null value prior to loading text into a document or an <see cref="T:System.InvalidOperationException"/>
            will be thrown.
            </p>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the value is set and <see cref="P:Lexing.Regex
            </exception>
            <exception cref="T:System.ArgumentException">
            Occurs when the value specified does not belong to the <see cref="P:Lexing.Regex
            </exception>
            <seealso cref="P:Lexing.Regex
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets or sets the value indicating how the syntax tree should be pruned.
            </summary>
            <remarks>
            <p class="body">
            A grammar writer could define certain non-terminal symbols to group certain constructs together for reuse purposes. If these kinds of
            symbols should not appear in the final parse tree, naming these helper symbols with an underscore ('_') prefix and using the BasedOnName
            pruning mode will removed them from the final parse tree. In addition, certain operator precedence rules require long chains of lower 
            precedence rules containing higher precedence rules. When only the higher precedence structure is used, the owning lower precedence symbol
            should not appear in the tree. In these cases, using the BasedOnChildren pruning mode will remove non-terminals which only have a single
            non-terminal child. Or BasedOnChildrenAndName (the default value for this property) could be used to perform both types of pruning modes.
            </p>
            <p class="body">
            Pruning can be overridden on individual non-terminal symbols by setting their <see cref="P:Lexing.Regex
            value to True, or in EBNF by marking a non-terminal definition with a special sequence like this: "?&lt;PreventPruning/&gt;?"
            </p>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the value is set and <see cref="P:Lexing.Regex
            </exception>
            <exception cref="T:System.ArgumentException">
            Occurs when the specified value is not defined in the <see cref="P:Lexing.Regex
            </exception>
            <seealso cref="P:Lexing.Regex
            <seealso cref="P:Lexing.Regex
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets a collection of <see cref="T:Lexing.Regex
            lexical analysis of a document.
            </summary>
            <remarks>
            <p class="body">
            Each leaf <see cref="T:Lexing.Regex
            corresponds to a TerminalSymbol in the <see cref="T:Lexing.Regex
            </p>
            </remarks>
            <seealso cref="P:Lexing.Regex
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets or sets the regular expression pattern used to identify non-newline whitespace by the syntax analysis layer.
            </summary>
            <remarks>
            <p class="body">
            By default, the pattern '[ \t]+' is used, which matches the ASCII characters 9 (horizontal tab) and 32 (space). 
            This property can be set to any valid regular expression pattern to change the definition of whitespace for this grammar.
            </p>
            <p class="body">
            To suppress automatic whitespace parsing, set this property to null or an empty string.
            </p>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the value is set and <see cref="P:Lexing.Regex
            </exception>
            <exception cref="T:System.ArgumentException">
            Occurs when the value specified is not a valid regular expression pattern.
            </exception>
            <seealso cref="P:Lexing.Regex
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets a <see cref="T:Lexing.Regex
            </summary>
            <remarks>
            <p class="body">
            To assign a name to the symbol, set the <see cref="P:Lexing.Regex
            from the <see cref="P:Lexing.Regex
            built-in symbols.
            </p>
            </remarks> 
            <seealso cref="P:Lexing.Regex
            <seealso cref="P:Lexing.Regex
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets or sets the name that is used to reference the <see cref="P:Lexing.Regex
            </summary>
            <remarks>
            <p class="body">
            This can be used to get the symbol from the <see cref="P:Lexing.Regex
            even though the collection does not contain built-in symbols.
            </p>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the value is set and <see cref="P:Lexing.Regex
            </exception>
            <exception cref="T:System.ArgumentException">
            Occurs when the specified name matches that of another symbol in the <see cref="T:Lexing.Regex
            </exception>
            <seealso cref="P:Lexing.Regex
        </member>
        <member name="T:Lexing.Regex
            <summary>
            Contains the results of the grammar analysis, which has information indicating how a grammar creator might be able to improve the grammar for
            better parsing.
            </summary>
            <seealso cref="M:Lexing.Regex
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Gets the string representation of the <see cref="T:Lexing.Regex
            </summary>
            <returns>The string representation of the GrammarAnalysisResult.</returns>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets the <see cref="P:Lexing.Regex
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets the read-only collection of warnings for the analysis of the <see cref="P:Lexing.Regex
            </summary>
        </member>
        <member name="T:Lexing.Regex
            <summary>
            Represents a warning which was found during the analysis of the <see cref="T:Lexing.Regex
            </summary>
            <seealso cref="P:Lexing.Regex
            <seealso cref="M:Lexing.Regex
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Gets the string representation of the <see cref="T:Lexing.Regex
            </summary>
            <returns>The string representation of the GrammarWarning.</returns>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets the message describing the warning.
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets the type of the warning.
            </summary>
        </member>
        <member name="T:Lexing.Regex
            <summary>
            A read-only collection of <see cref="T:Lexing.Regex
            </summary>
            <seealso cref="P:Lexing.Regex
            <seealso cref="M:Lexing.Regex
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets the number of warnings in the collection.
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets the <see cref="T:Lexing.Regex
            </summary>
            <param name="index">The zero-based index of the warning to get.</param>
            <returns>The GrammarWarning at the specified index.</returns>
        </member>
        <member name="T:Lexing.Regex
            <summary>
            Represents a piece of ignored content in the parse tree.
            </summary>
        </member>
        <member name="F:Lexing.Regex
            <summary>
            Empty ignored content which doesn't exist in a parse tree.
            </summary>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Determines whether the specified object equals this <see cref="T:Lexing.Regex
            </summary>
            <param name="obj">The object to test for equality.</param>
            <returns>True if obj is another IgnoredContent with the same values; False otherwise.</returns>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Gets a hash code for the <see cref="T:Lexing.Regex
            </summary>
            <returns>A hash code for the IgnoredContent value.</returns>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Gets the text of the ignored content.
            </summary>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Determines whether two <see cref="T:Lexing.Regex
            </summary>
            <returns>True if the values are equal; False otherwise.</returns>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Determines whether two <see cref="T:Lexing.Regex
            </summary>
            <returns>True if the values are not equal; False otherwise.</returns>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Determines whether the specified value equals this <see cref="T:Lexing.Regex
            </summary>
            <param name="other">The IgnoredContent value to test for equality.</param>
            <returns>True if other has the same values; False otherwise.</returns>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Gets the <see cref="T:Lexing.Regex
            </summary>
            <returns>A SyntaxNode instance for the structured ignored content or null for simple ignored content.</returns>
            <seealso cref="P:Lexing.Regex
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Gets the text of the ignored content.
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets the value indicating whether the ignored content contains error, such as a skipped token.
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets the value indicating whether the ignored content has a <see cref="T:Lexing.Regex
            </summary>
            <seealso cref="M:Lexing.Regex
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets the language element represented by the ignored content.
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets the <see cref="T:Lexing.Regex
            </summary>
            <value>A TextSpan that represents the position of the ignored content.</value>
        </member>
        <member name="T:Lexing.Regex
            <summary>
            Represents a set of contiguous ignored content in the parse tree.
            </summary>
        </member>
        <member name="F:Lexing.Regex
            <summary>
            An empty ignored content list which doesn't exist in a parse tree.
            </summary>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Gets an enumerator which returns all <see cref="T:Lexing.Regex
            </summary>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Determines whether the specified object equals this <see cref="T:Lexing.Regex
            </summary>
            <param name="obj">The object to test for equality.</param>
            <returns>True if obj is another IgnoredContentList with the same values; False otherwise.</returns>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Gets a hash code for the <see cref="T:Lexing.Regex
            </summary>
            <returns>A hash code for the IgnoredContent value.</returns>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Gets the text of the ignored content.
            </summary>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Determines whether two <see cref="T:Lexing.Regex
            </summary>
            <returns>True if the values are equal; False otherwise.</returns>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Determines whether two <see cref="T:Lexing.Regex
            </summary>
            <returns>True if the values are not equal; False otherwise.</returns>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Determines whether the specified value equals this <see cref="T:Lexing.Regex
            </summary>
            <param name="other">The IgnoredContentList value to test for equality.</param>
            <returns>True if other has the same values; False otherwise.</returns>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Gets the text of the ignored content.
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets the number of <see cref="T:Lexing.Regex
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets the <see cref="T:Lexing.Regex
            </summary>
            <param name="index">The 0-based index of the IgnoredContent value to get.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Occurs when <paramref name="index"/> is less than 0 or greater than or equal to <see cref="P:Lexing.Regex
            </exception>
            <returns>A IgnoredContent value represented the item at the specified index.</returns>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets the <see cref="T:Lexing.Regex
            </summary>
            <value>A TextSpan that represents the position of the ignored content.</value>
        </member>
        <member name="T:Lexing.Regex
            <summary>
            Sorts from longest value to shortest
            </summary>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Returns the hash code of the structure.
            </summary>
            <returns>A hash code for this instance</returns>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Compares the specified object to this object to see if they are equivalent.
            </summary>
            <param name="obj">The object to compare</param>
            <returns>True if the objects are equal; otherwise false</returns>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Compares the values of two <see cref="T:Lexing.Regex
            </summary>
            <param name="tripleChar1">The first structure</param>
            <param name="tripleChar2">The other structure</param>
            <returns>true if the two instances are equal; otherwise false</returns>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Compares the values of two <see cref="T:Lexing.Regex
            </summary>
            <param name="tripleChar1">The first structure</param>
            <param name="tripleChar2">The other structure</param>
            <returns>true if the two instances are not equal; otherwise false</returns>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Initializes the lexer with the specified state information.
            </summary>
            <param name="input">The string to be lexed. Lexing.Regex stops when the end of this string is reached, unless maxLines stops it sooner.</param>
            <param name="charPos">The character position, relative to the beginning of the input string.</param>
            <param name="includeEOS">
            Specifies whether the end of the input string is to be considered
            the end of the document; when true, the end of stream token is added to the last line.
            </param>
            <param name="nextUnconsumed">The next character position, relative to the beginning of the input string, at which the lexer can start looking for tokens which do not consume text (see TerminalSymbol.ConsumesText).</param>
            <param name="lexerState">[optional] The initial lexical state. Null implies the default lexical state.</param>
            <param name="maxLines">The maximum number of lines to return. Lexing.Regex stops when this limit is reached, unless the end of the input stream is reached first.</param>
            <param name="beforeTokens">[optional] Recycled tokens which are added to the first line, immediately preceding the first lexed token.</param>
        </member>
        <member name="T:Lexing.Regex
            <summary>
            Defines a lexical state.
            </summary>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Adds the specified <see cref="T:Lexing.Regex
            </summary>
            <param name="symbol">The TerminalSymbol which sould cause the LexerState to be entered.</param>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="symbol"/> is null.
            </exception>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Adds the specified <see cref="T:Lexing.Regex
            </summary>
            <param name="symbol">The TerminalSymbol which sould cause the LexerState to be exited.</param>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="symbol"/> is null.
            </exception>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Adds the specified
            <see cref="T:Lexing.Regex
            to the list of symbols which belong to this LexerState.
            </summary>
            <param name="symbol">
            The
            <see cref="T:Lexing.Regex
            to add.
            </param>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Returns the string representation of this object.
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Returns the name which uniquely identifies this lexical mode.
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Returns the 
            <see cref="T:Lexing.Regex
            which belong to this lexer state.
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets the <see cref="T:Lexing.Regex
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets the <see cref="T:Lexing.Regex
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Returns the
            <see cref="T:Lexing.Regex
            from which this lexer state is opened, or null if this lexer state
            is opened only from the default lexer state.
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Returns a boolean value indicating whether the lexer state
            automatically exits when a newline is encountered in the
            input stream.
            </summary>
            <remarks>
            <p class="body">
            In the case where one of the the <see cref="P:Lexing.Regex
            were set to true.
            </p>
            <p class="body">
            Since the set of tokens generated by most lexer states do not span across lines,
            this property defaults to true. In cases where the lexer state should not exit
            when a newline is encountered, set this property to false.
            </p>
            </remarks>
        </member>
        <member name="T:Lexing.Regex
            <summary>
            Collection class for
            <see cref="T:Lexing.Regex
            </summary>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Adds a new
            <see cref="T:Lexing.Regex
            to this collection.
            </summary>
            <param key="name">
            The value of the
            <see cref="P:Lexing.Regex
            property.
            </param>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Removes the specified
            <see cref="T:Lexing.Regex
            from this collection.
            </summary>
            <param key="name">
            The value of the
            <see cref="P:Lexing.Regex
            property of the lexer state to remove.
            </param>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Removes all members from this collection.
            </summary>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Returns a boolean value indicating whether the specified
            <see cref="T:Lexing.Regex
            exists within this collection.
            </summary>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Returns a boolean value indicating whether a
            <see cref="T:Lexing.Regex
            with the specified <paramref key="value"/>
            exists within this collection.
            </summary>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Tries to get a <see cref="T:Lexing.Regex
            </summary>
            <param name="name">The name of the lexer state to find in the collection, case-insensitively.</param>
            <param name="lexerState">[Out] Contains the lexer state with the specified name or null if no lexer state has the name specified.</param>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Returns the string representation of this object.
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Returns the instance with the specified <paramref key="name"/>.
            </summary>
            <param key="name">
            The
            <see cref="P:Lexing.Regex
            of the lexer state to return.
            </param>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Returns the number of elements in this collection.
            </summary>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Compares the specified object to this object to see if they are equivalent.
            </summary>
            <param name="obj">The object to compare</param>
            <returns>True if the objects are equal; otherwise false</returns>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Returns the hash code of the object.
            </summary>
            <returns>A hash code for this instance</returns>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Compares the values of two <see cref="T:Lexing.Regex
            </summary>
            <param name="token1">The first structure</param>
            <param name="token2">The other structure</param>
            <returns>true if the two instances are equal; otherwise false</returns>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Compares the values of two <see cref="T:Lexing.Regex
            </summary>
            <param name="token1">The first structure</param>
            <param name="token2">The other structure</param>
            <returns>true if the two instances are not equal; otherwise false</returns>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Returns the string representation of this object.
            </summary>
        </member>
        <member name="T:Lexing.Regex
            <summary>
            Represents all the tokens in a line.
            </summary>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Compares the specified object to this object to see if they are equivalent.
            </summary>
            <param name="obj">The object to compare</param>
            <returns>True if the objects are equal; otherwise false</returns>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Returns the hash code of the object.
            </summary>
            <returns>A hash code for this instance</returns>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Compares the values of two <see cref="T:Lexing.Regex
            </summary>
            <param name="line1">The first structure</param>
            <param name="line2">The other structure</param>
            <returns>true if the two instances are equal; otherwise false</returns>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Compares the values of two <see cref="T:Lexing.Regex
            </summary>
            <param name="line1">The first structure</param>
            <param name="line2">The other structure</param>
            <returns>true if the two instances are not equal; otherwise false</returns>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Returns a string representation of the object.
            </summary>
            <returns>A string that represents this <see cref="T:Lexing.Regex
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Returns the character at a specific offset in the line.
            </summary>
            <param name="charOffset">The zero-based offset of the character from the beginning of the line.</param>
            <returns>The character in question.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If charOffset is less than 0 or greater than or equal to <see cref="P:Lexing.Regex
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Returns the concatenated text from all the tokens that make up the line
            </summary>
            <param name="includeLineFeed">If true the returned string will include any carriage return/line feed characters at the end of the line.</param>
            <returns>A string representing the complete text of the line.</returns>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Returns the token at a specific index.
            </summary>
            <param name="tokenIndex">The zero-based index of the token.</param>
            <returns>The token in question.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If tokenIndex is less than 0 or greater than or equal to <see cref="P:Lexing.Regex
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Returns the token that contains a specific character.
            </summary>
            <param name="charOffset">The zero-based offset of the character from the beginning of the line.</param>
            <param name="includeZeroLengthTokens">If true will return the first at the offset even if it has no length.</param>
            <returns>The token in question.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If charOffset is less than 0 or greater than or equal to <see cref="P:Lexing.Regex
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Returns the zero-based index of a token.
            </summary>
            <param name="token">The token to test.</param>
            <returns>The zero-based index or -1 if the token is not in the line.</returns>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Returns true if the specified <see cref="T:Lexing.Regex
            </summary>
            <param name="lineInfo">The <see cref="T:Lexing.Regex
            <returns>True if the specified <see cref="T:Lexing.Regex
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Returns the length of all the text in the line including charriage return and line feed characters. (read-only).
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Returns the zero-based index of the line (read-only).
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Returns the 1-based line number (read-only).
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> this is one more than the <see cref="P:Lexing.Regex
            </remarks>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Returns the zero-based offset of this line from the beginning of the document (read-only).
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Returns the total number of tokens in the line including the line terminator token (read-only).
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Returns the length of all the text in the line excluding carriage return and line feed characters. (read-only).
            </summary>
        </member>
        <member name="T:Lexing.Regex
            <summary>
            A grammar symbol which represents one or more combinations of symbols, which can be terminals or non-terminals. 
            A non-terminal is also known as a <i>syntactic variables</i>.
            </summary>
        </member>
        <member name="T:Lexing.Regex
            <summary>
            Represents a symbol in the associated <see cref="P:Lexing.Regex
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets the <see cref="P:Lexing.Regex
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets or sets a value indicating whether the presence of the <see cref="T:Lexing.Regex
            the middle or end of a structure being parsed.
            </summary>
            <remarks>
            <p class="body">
            The use of this setting helps the error handling logic report more meaningful errors. This should be used on symbols which, when followed
            by a specific TerminalSymbol, unambiguously indicate that the middle or end of a structure has been reached. For example, in VB.NET, the
            "End" keyword followed by the "Class" keyword unambiguously signals the end of a Class declaration. Similarly, the "End" keyword followed
            by a "Sub" keyword unambiguously signals the end of a Sub (method) declaration. If the parser is currently within a Sub declaration that is
            within a Class declaration and the "End" keyword is found followed by the "Class" keyword, the use of IsStartOfErrorRecoveryPair will let
            the error handling logic know that "End Class" cannot end the Sub declaration and therefore, the "End Sub" is missing. That missing pair
            will then be inserted in the parse tree so that "End Class" can correctly be used to close the owning class. Therefore, setting the value
            to True on the TerminalSymbol representing the "End" keyword would help the parser provide more meaningful error messages when parsing 
            documents in the VB.NET language.
            </p>
            <p class="note">
            <b>Note:</b> This value is intended to be used on relatively small constructs. If the number of terminal symbols parsed to create a symbol
            is more than 10, the IsStartOfErrorRecoveryPair value will be ignored for that symbol.
            </p>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the <see cref="P:Lexing.Regex
            </exception>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Returns the name of the symbol.
            </summary>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Returns the string representation of this object.
            </summary>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Disables error recovery for the specified symbol when an error occurs during the construction of the <see cref="T:Lexing.Regex
            </summary>
            <param name="symbol">The symbol for which error recovery should be suppressed.</param>
            <remarks>
            <p class="body">
            When parsing a document, if an unexpected token is encountered from the lexical analyzer, the parse must attempt to recover from the error.
            It uses a number of strategies to do this, each of which handles different kinds of errors. One of these strategies will take the non-terminals
            which are currently in construction when the error occurred and see if the unexpected token from the lexical analyzer should have actually 
            come later in one of those non-terminals. If so, it will insert the missing structures up to the unexpected token, thereby making the token
            "expected" and the parse can continue. However, it is possible that this type of error recovery is incorrect for certain non-terminals.
            </p>
            <p class="body">
            For example, a class declaration in C# can have an optional semicolon token after its close brace. If an erroneous semicolon is typed within
            the class members section, like so: "class X{ ; }", the error recovery routine will assume the semicolon is the optional semicolon after the
            closing brace. It will then insert the missing closing brace into the parse tree. When it reaches the actual closing brace, it will be skipped
            and marked as an error for being unexpected. One could argue that this is actually a correct reporting of errors, but things get much worse
            when there are class members declared after the semicolon. All tokens representing those members could be skipped if they cannot exist after 
            the end of a class declaration.
            </p>
            <p class="body">
            To solve this issue, certain non-terminals may need to know that an erroneous token should really be skipped rather than used in the error
            recovery process. In the example above, semicolons are only optional at the end of the class. Intuitively, one can see that the close brace 
            should have priority over the semicolon to signal the end of the class. Therefore, the semicolon in the a class declaration should not be 
            considered in the error recovery routine. So the <see cref="T:Lexing.Regex
            SuppressErrorRecoveryForSymbol method on the <see cref="T:Lexing.Regex
            </p>
            <p class="note">
            <b>Note:</b> The suppression will only work if the specified <paramref name="symbol"/> is directly referenced by the NonTerminalSymbol in its
            rule hierarchy. If the symbol is indirectly referenced through a reference to another non-terminal symbol, this call will have no effect on the 
            error recovery process. In addition, the same is true if the symbol specified is referenced within a <see cref="T:Lexing.Regex
            this for symbols within a repetition rule, the rules would need to be restructured to remove the repetition. For example, in the EBNF rule 
            "A = B, {C, D};", non-terminal "A" could not have error recovery suppressed for symbol "C". But the rule could be re-written as two rules: 
            "A = B, X; X = [X, C, D];" In this case, "X" could have error recovery suppressed for symbol "C".
            </p>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="symbol"/> is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the <see cref="P:Lexing.Regex
            </exception>
            <exception cref="T:System.ArgumentException">
            Occurs when <paramref name="symbol"/> is not from the same Grammar as the NonTerminalSymbol.
            </exception>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets or sets the value indicating whether the <see cref="T:Lexing.Regex
            when a global ambiguity is detected.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the <see cref="P:Lexing.Regex
            </exception>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets or sets a value indicating whether this non-terminal represents an error when it is found in the parsed document.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the <see cref="P:Lexing.Regex
            </exception>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets a value indicating whether the <see cref="T:Lexing.Regex
            value of the associated Grammar and therefore if it must be at the root of the syntax tree of the parsed document.
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets or sets the value indicating whether nodes representing the <see cref="T:Lexing.Regex
            regardless of the <see cref="P:Lexing.Regex
            </summary>
            <seealso cref="T:Lexing.Regex
            <seealso cref="P:Lexing.Regex
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets or sets the <see cref="T:Lexing.Regex
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the <see cref="P:Lexing.Regex
            </exception>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets or sets the value indicating whether <see cref="M:Lexing.Regex
            non-terminal symbols reduction is possible.
            </summary>
            <remarks>
            <p class="note">
            <b>Note:</b> Unlike other settings on the <see cref="T:Lexing.Regex
            of the <see cref="P:Lexing.Regex
            </p>
            </remarks>
            <seealso cref="M:Lexing.Regex
        </member>
        <member name="T:Lexing.Regex
            <summary>
            A base class for a collection of <see cref="T:Lexing.Regex
            </summary>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Returns the string representation of the collection.
            </summary>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Removes all <see cref="T:Lexing.Regex
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the <see cref="P:Lexing.Regex
            </exception>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Returns a value indicating whether the specified <see cref="T:Lexing.Regex
            </summary>
            <param name="symbol">The symbol to find in the collection.</param>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="symbol"/> is null.
            </exception>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Returns a value indicating whether a <see cref="T:Lexing.Regex
            </summary>
            <param name="name">The name of the symbol to find in the collection.</param>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="name"/> is null or empty.
            </exception>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Removes the <see cref="T:Lexing.Regex
            </summary>
            <param name="name">The name of the Symbol to remove.</param>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="name"/> is null or empty.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the <see cref="P:Lexing.Regex
            </exception>
            <returns>True if a non-terminal symbol with the name was in the collection before removal; False otherwise.</returns>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Removes the specified <see cref="T:Lexing.Regex
            </summary>
            <param name="symbol">The Symbol to remove.</param>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="symbol"/> is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the <see cref="P:Lexing.Regex
            </exception>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Tries to get a <see cref="T:Lexing.Regex
            </summary>
            <param name="name">The name of the symbol to find in the collection.</param>
            <param name="symbol">[Out] Contains the symbol with the specified name or null if no symbol has the name specified.</param>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="name"/> is null or empty.
            </exception>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets the number of symbols in this collection.
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets the <see cref="T:Lexing.Regex
            </summary>
            <param name="name">
            The <see cref="P:Lexing.Regex
            </param>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="name"/> is null or empty.
            </exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            Occurs when no Symbol with the specified name exists in the collection.
            </exception>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets the <see cref="T:Lexing.Regex
            </summary>
            <param name="index">The 0-based index of the Symbol to get.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Occurs when <paramref name="index"/> is less than 0 or greater than or equal to <see cref="P:Lexing.Regex
            </exception>
        </member>
        <member name="T:Lexing.Regex
            <summary>
            A collection of <see cref="T:Lexing.Regex
            </summary>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Adds a new <see cref="T:Lexing.Regex
            </summary>
            <param name="name">The <see cref="P:Lexing.Regex
            <exception cref="T:System.InvalidOperationException">
            Occurs when the <see cref="P:Lexing.Regex
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="name"/> is null or empty.
            </exception>
            <exception cref="T:System.ArgumentException">
            Occurs when a symbol of the owning Grammar already exists with the specified name.
            </exception>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            For generated language class usage only.
            </summary>
        </member>
        <member name="T:Lexing.Regex
            <summary>
            A collection of <see cref="T:Lexing.Regex
            TerminalSymbol which is first in the collection will be used.
            </summary>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Tries to get a <see cref="T:Lexing.Regex
            </summary>
            <param name="name">The name of the symbol to find in the collection.</param>
            <param name="symbol">[Out] Contains the symbol with the specified name or null if no symbol has the name specified.</param>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="name"/> is null or empty.
            </exception>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Adds a new <see cref="T:Lexing.Regex
            </summary>
            <param name="name">The <see cref="P:Lexing.Regex
            <param name="value">
            The text which must be matched for the terminal symbol to be recognized within the text. If null, the <paramref name="name"/> will 
            be used as the value.
            </param>
            <param name="comparison">
            Indicates how the text should be interpreted: as a case-sensitive literal string, a case-insensitive literal string, or a regular expression.
            </param>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the <see cref="P:Lexing.Regex
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="name"/> is null or empty.
            </exception>
            <exception cref="T:System.ArgumentException">
            Occurs when a symbol of the owning Grammar already exists with the specified name.
            </exception>
            <exception cref="T:System.ArgumentException">
            Occurs when <paramref name="comparison"/> is not defined in the <see cref="T:Lexing.Regex
            </exception>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            For generated language class usage only.
            </summary>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Inserts a new <see cref="T:Lexing.Regex
            </summary>
            <param name="index">The 0-based index where the symbol should be inserted.</param>
            <param name="name">The <see cref="P:Lexing.Regex
            <param name="value">
            The text which must be matched for the terminal symbol to be recognized within the text. If null, the <paramref name="name"/> will 
            be used as the value.
            </param>
            <param name="comparison">
            Indicates how the text should be interpreted: as a case-sensitive literal string, a case-insensitive literal string, or a regular expression.
            </param>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the <see cref="P:Lexing.Regex
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="name"/> is null or empty.
            </exception>
            <exception cref="T:System.ArgumentException">
            Occurs when a symbol of the owning Grammar already exists with the specified name.
            </exception>
            <exception cref="T:System.ArgumentException">
            Occurs when <paramref name="comparison"/> is not defined in the <see cref="T:Lexing.Regex
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Occurs when <paramref name="index"/> is less than 0 or greater than Count.
            </exception>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets the <see cref="T:Lexing.Regex
            </summary>
            <param name="name">
            The <see cref="P:Lexing.Regex
            </param>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="name"/> is null or empty.
            </exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            Occurs when no Symbol with the specified name exists in the collection.
            </exception>
        </member>
        <member name="T:Lexing.Regex
            <summary>
            A class that represents a node in the parse tree.
            </summary>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Compares the specified object to this object to see if they are equivalent.
            </summary>
            <param name="obj">The object to compare</param>
            <returns>True if the objects are equal; otherwise false</returns>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Returns the hash code of the object.
            </summary>
            <returns>A hash code for this instance</returns>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Returns the string representation of this object.
            </summary>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Returns an object that can return an enumerator for all ancestor nodes of this node
            </summary>
            <param name="includeSelf">True to return this node first from the enumeration.</param>
            <returns>An object that can return an enumerator for all ancestor nodes of this node.</returns>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Returns an object that can return an enumerator for all direct child nodes of this node
            </summary>
            <param name="span">An optinal span to restrict the result. The span offset is relative to the beginning of the document.</param>
            <param name="filter">A function that can decide which child nodes get returned from the enumerator.</param>
            <param name="enumerateBackwards">True to enumerate from last to first child node.</param>
            <returns>An object that can return an enumerator for all direct child nodes of this node.</returns>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Returns an object that can return an enumerator for all descendant nodes of this node
            </summary>
            <param name="span">An optinal span to restrict the result. The span offset is relative to the beginning of the document.</param>
            <param name="filter">A function that can decide which descendant nodes get returned from the enumerator.</param>
            <param name="enumerateBackwards">True to enumerate from last to first descendant node.</param>
            <param name="enumerateStructuredIgnoredContent">True to enumerate structured ignored content nodes, such as skipped tokens.</param>
            <returns>An object that can return an enumerator for all descendant nodes of this node.</returns>
            <seealso cref="T:Lexing.Regex
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Returns an enumerator for all nodes within the sub-tree rooted at this node with annotations.
            </summary>
            <param name="span">An optional span to restrict the result. The span offset is relative to the beginning of the document.</param>
            <returns>An enumerator for all nodes within the sub-tree rooted at this node with annotations.</returns>
            <seealso cref="P:Lexing.Regex
            <seealso cref="M:Lexing.Regex
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Returns an enumerator for all nodes within the sub-tree rooted at this node with annotations.
            </summary>
            <param name="type">The type of annotations to find. All returned nodes will have one or more annotation of type or derived from type.</param>
            <param name="span">An optional span to restrict the result. The span offset is relative to the beginning of the document.</param>
            <returns>An enumerator for all nodes within the sub-tree rooted at this node with annotations.</returns>
            <seealso cref="P:Lexing.Regex
            <seealso cref="M:Lexing.Regex
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Returns an enumerator for all nodes within the sub-tree rooted at this node with annotations.
            </summary>
            <param name="span">An optional span to restrict the result. The span offset is relative to the beginning of the document.</param>
            <returns>An enumerator for all nodes within the sub-tree rooted at this node with annotations.</returns>
            <typeparam name="T">The type of annotations to find. All returned nodes will have one or more annotation of type T or derived from T.</typeparam>
            <seealso cref="P:Lexing.Regex
            <seealso cref="M:Lexing.Regex
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Returns an enumerator for all annotation values of the node.
            </summary>
            <returns>An enumerator for all annotation values of the node.</returns>
            <seealso cref="P:Lexing.Regex
            <seealso cref="M:Lexing.Regex
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Returns an enumerator for all annotation values of a specific type of the node.
            </summary>
            <param name="type">The type of annotations to get. All returned instances will be of type or derived from type.</param>
            <returns>An enumerator for all annotation values of a specific type of the node.</returns>
            <seealso cref="P:Lexing.Regex
            <seealso cref="M:Lexing.Regex
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Returns an enumerator for all annotation values of a specific type of the node.
            </summary>
            <typeparam name="T">The type of annotations to get. All returned instances will be of type T or derived from T.</typeparam>
            <returns>An enumerator for all annotation values of a specific type of the node.</returns>
            <seealso cref="P:Lexing.Regex
            <seealso cref="M:Lexing.Regex
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Returns the child node at a specific index.
            </summary>
            <param name="childIndex">The 0-based index of the child.</param>
            <returns>The child node.</returns>
            <exception cref="T:System.IndexOutOfRangeException">
            Occurs when <paramref name="childIndex"/> is less than 0 or greater than or equal to the <see cref="P:Lexing.Regex
            </exception>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Returns an enumerator for all descendant <see cref="T:Lexing.Regex
            </summary>
            <param name="span">An optional span to restrict the result. The span offset is relative to the beginning of the document.</param>
            <returns>An enumerator for all descendant ParseError values of the node.</returns>
            <seealso cref="P:Lexing.Regex
            <seealso cref="M:Lexing.Regex
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Returns the first terminal node in this node's tree.
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> if this node is a terminal node then this method will return itself.</para>
            </remarks>
            <returns>The first node in this node's tree that is a terminal node.</returns>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Returns the last terminal node in this node's tree.
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> if this node is a terminal node then this method will return itself.</para>
            </remarks>
            <returns>The last node in this node's tree that is a terminal node.</returns>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Returns the list of all leading ignored content before this node.
            </summary>
            <remarks>
            <p class="body">
            If <see cref="P:Lexing.Regex
            </p>
            </remarks>
            <seealso cref="P:Lexing.Regex
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Gets the text of this node and all of its descendants.
            </summary>
            <param name="includeLeadingIgnoredContent">
            If true will include the leading ignored content of the first descendant <see cref="T:Lexing.Regex
            </param>
            <returns>
            The reconstructed string contains all of the descendant <see cref="T:Lexing.Regex
            </returns>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Returns the count of child nodes (read-only).
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets the value indicating whether <see cref="M:Lexing.Regex
            the sub-tree rooted at the <see cref="T:Lexing.Regex
            </summary>
            <seealso cref="M:Lexing.Regex
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets the <see cref="T:Infragistics.Documents.SnapshotSpan"/> occupied by the <see cref="T:Lexing.Regex
            </summary>
            <remarks>
            <p class="body">
            The snapshot associated with the span will be null if the <see cref="P:Lexing.Regex
            and therefore is not assocaited with a <see cref="T:Infragistics.Documents.TextDocumentSnapshot"/>.
            </p>
            </remarks>
            <value>
            A SnapshotSpan that represents the node including all leading ignored content (see <see cref="P:Lexing.Regex
            </value>
            <seealso cref="P:Lexing.Regex
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets the full <see cref="T:Lexing.Regex
            </summary>
            <value>
            A TextSpan that represents the node including all leading ignored content (see <see cref="P:Lexing.Regex
            </value>
            <seealso cref="P:Lexing.Regex
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets the value indicating whether the node has associated annotations.
            </summary>
            <seealso cref="M:Lexing.Regex
            <seealso cref="M:Lexing.Regex
            <seealso cref="M:Lexing.Regex
            <seealso cref="M:Lexing.Regex
            <seealso cref="M:Lexing.Regex
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets the value indicating whether this node has ignored content before it.
            </summary>
            <seealso cref="M:Lexing.Regex
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Returns the zero-based index of this node in its <see cref="P:Lexing.Regex
            </summary>
            <value>-1 for the root node, otherwise the zero-based index of this node in its parent's children.</value>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets the value indicating whether the node represents structured ignored content.
            </summary>
            <seealso cref="T:Lexing.Regex
            <seealso cref="T:Lexing.Regex
            <seealso cref="M:Lexing.Regex
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets the value indicating whether the node is a missing from the text and was inserted while parsing.
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets the value indicating whether the node was skipped while parsing because it was not expected in its context.
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Returns whether this is a terminal node (i.e. it has no child nodes) (read-only).
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Returns the associated Language (read-only) 
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets the number of ignored characters before the node.
            </summary>
            <remarks>
            <p class="note">
            <b>Note:</b> LeadingIgnoredContentLength is included in <see cref="P:Lexing.Regex
            </p>
            </remarks>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Returns the aggregate string length (read-only) 
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Returns the overall offset of the node within the entire tree (read-only) 
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Returns the parent node (read-only)
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Returns the relatve offset of the node within its parent node (read-only) 
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets the <see cref="T:Infragistics.Documents.SnapshotSpan"/> occupied by the <see cref="T:Lexing.Regex
            </summary>
            <remarks>
            <p class="body">
            The snapshot associated with the span will be null if the <see cref="P:Lexing.Regex
            and therefore is not assocaited with a <see cref="T:Infragistics.Documents.TextDocumentSnapshot"/>.
            </p>
            </remarks>
            <value>
            A SnapshotSpan that represents the node excluding any leading ignored content (see <see cref="P:Lexing.Regex
            </value>
            <seealso cref="P:Lexing.Regex
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets the <see cref="T:Lexing.Regex
            </summary>
            <value>
            A TextSpan that represents the node excluding any leading ignored content (see <see cref="P:Lexing.Regex
            </value>
            <seealso cref="P:Lexing.Regex
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Returns the
            <see cref="T:Lexing.Regex
            which produced this token.
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets the <see cref="P:Lexing.Regex
            </summary>
        </member>
        <member name="T:Lexing.Regex
            <summary>
            Abstract base class for all rules defining what a <see cref="T:Lexing.Regex
            </summary>
            <seealso cref="P:Lexing.Regex
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Returns the string representation of this object.
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Returns the
            <see cref="T:Lexing.Regex
            whose rule tree contains this rule.
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets the <see cref="T:Lexing.Regex
            </summary>
        </member>
        <member name="T:Lexing.Regex
            <summary>
            Represents an empty set of symbols. This rule succeed by matching nothing from the document.
            </summary>
            <seealso cref="P:Lexing.Regex
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Creates a new <see cref="T:Lexing.Regex
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets the <see cref="T:Lexing.Regex
            </summary>
        </member>
        <member name="T:Lexing.Regex
            <summary>
            Represents a symbol reference rule. The symbol associated with the rule must be found in the parsed text for the 
            rule is succeed.
            </summary>
            <seealso cref="P:Lexing.Regex
            <seealso cref="P:Lexing.Regex
            <seealso cref="P:Lexing.Regex
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Creates a new <see cref="T:Lexing.Regex
            </summary>
            <param name="symbol">The symbol which must be found in the document for the SyntaxSymbolReferenceRule to succeed.</param>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="symbol"/> is null.
            </exception>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Returns the string representation of this object.
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets the <see cref="T:Lexing.Regex
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets the <see cref="P:Lexing.Regex
            </summary>
        </member>
        <member name="T:Lexing.Regex
            <summary>
            Abstract base class for <see cref="T:Lexing.Regex
            </summary>
            <seealso cref="P:Lexing.Regex
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets or sets the <see cref="T:Lexing.Regex
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the <see cref="P:Lexing.Regex
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the specified value is already owned by another rule or <see cref="T:Lexing.Regex
            </exception>
        </member>
        <member name="T:Lexing.Regex
            <summary>
            Represents an excption rule, which can only succeed if its sub-rule matches content and the exception rule does not succeed for the same content.
            </summary>
            <seealso cref="P:Lexing.Regex
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Creates a new <see cref="T:Lexing.Regex
            </summary>
            <param name="rule">The rule which must succeed for the SyntaxExceptionRule to succeed.</param>
            <param name="exception">The rule which must not succeed for the SyntaxExceptionRule to succeed.</param>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets the <see cref="T:Lexing.Regex
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets or sets the exception <see cref="T:Lexing.Regex
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the <see cref="P:Lexing.Regex
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the specified value is already owned by another rule or <see cref="T:Lexing.Regex
            </exception>
        </member>
        <member name="T:Lexing.Regex
            <summary>
            Represents a rule which will succeed if its owned <see cref="P:Lexing.Regex
            </summary>
            <seealso cref="P:Lexing.Regex
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Creates a new <see cref="T:Lexing.Regex
            </summary>
            <param name="rule">The rule which can optionally succeed for the SyntaxOptionalRule to succeed.</param>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets the <see cref="T:Lexing.Regex
            </summary>
        </member>
        <member name="T:Lexing.Regex
            <summary>
            Represents a rule which will succeed if its owned <see cref="P:Lexing.Regex
            between the <see cref="P:Lexing.Regex
            </summary>
            <seealso cref="P:Lexing.Regex
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Creates a new <see cref="T:Lexing.Regex
            </summary>
            <param name="minimumOccurrences">The minimum number of occurrences of the <see cref="P:Lexing.Regex
            <param name="maximumOccurrences">
            The maximum number of occurrences of the <see cref="P:Lexing.Regex
            </param>
            <param name="rule">The rule which can repeatedly succeed for the SyntaxRepetitionRule to succeed.</param>
            <seealso cref="P:Lexing.Regex
        </member>
        <member name="M:Lexing.Regex
            <summary>
            For generated language class usage only.
            </summary>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Returns the string representation of this object.
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets the <see cref="T:Lexing.Regex
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets the maximum number of occurrences allowed by the owned <see cref="P:Lexing.Regex
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets the minimum number of occurrences allowed by the owned <see cref="P:Lexing.Regex
            </summary>
        </member>
        <member name="T:Lexing.Regex
            <summary>
            Abstract base class for <see cref="T:Lexing.Regex
            </summary>
            <seealso cref="P:Lexing.Regex
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets the collection of rules owned by the <see cref="T:Lexing.Regex
            </summary>
        </member>
        <member name="T:Lexing.Regex
            <summary>
            Represents a rule which will succeed if one of its child <see cref="P:Lexing.Regex
            </summary>
            <seealso cref="P:Lexing.Regex
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Creates a new <see cref="T:Lexing.Regex
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets the <see cref="T:Lexing.Regex
            </summary>
        </member>
        <member name="T:Lexing.Regex
            <summary>
            Represents a rule which will succeed if all of its child <see cref="P:Lexing.Regex
            </summary>
            <seealso cref="P:Lexing.Regex
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Creates a new <see cref="T:Lexing.Regex
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets the <see cref="T:Lexing.Regex
            </summary>
        </member>
        <member name="T:Lexing.Regex
            <summary>
            A collection of <see cref="T:Lexing.Regex
            </summary>
            <seealso cref="P:Lexing.Regex
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Returns the string representation of this object.
            </summary>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Adds the specified <see cref="T:Lexing.Regex
            </summary>
            <param name="rule">The SyntaxRule-derived instance to add to the collection.</param>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="rule"/> is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Occurs when <paramref name="rule"/> is already owned by another rule.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the <see cref="P:Lexing.Regex
            </exception>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Removes all rules from the collection.
            </summary>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Gets the index of the specified rule or -1 if it doesn't exist.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="rule"/> is null.
            </exception>
            <returns>The zero-based index of the rule in the collection or -1 if it doesn't exist.</returns>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Removes the specified rule from this collection.
            </summary>
            <param key="rule">The <see cref="T:Lexing.Regex
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="rule"/> is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the <see cref="P:Lexing.Regex
            </exception>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Removes the rule at the specified index from this collection.
            </summary>
            <param key="index">The 0-based index of the <see cref="T:Lexing.Regex
            <exception cref="T:System.ArgumentOutOfRangeException">
            Occurs when <paramref name="index"/> is less than 0 or greater than or equal to <see cref="P:Lexing.Regex
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the <see cref="P:Lexing.Regex
            </exception>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Returns the number of elements in this collection.
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Returns the
            <see cref="T:Lexing.Regex
            at the specified <paramref key="index"/>.
            </summary>
            <param key="index">The ordinal position of the rule within this collection.</param>
        </member>
        <member name="T:Lexing.Regex
            <summary>
            A grammar symbol which represents an elementary unit of the language.
            </summary>
        </member>
        <member name="F:Lexing.Regex
            <summary>
            Returns the regular expression pattern used by default for the <see cref="P:Lexing.Regex
            </summary>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Returns the string representation of this object.
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Returns or sets the regular expression pattern which defines the
            character or characters expected to follow tokens parsed by this
            <see cref="T:Lexing.Regex
            </summary>
            <remarks>
            <p class="body">
            Boundary checking can be suppressed altogether by setting this property
            to an empty string. In this case, tokens parsed by this terminal symbol
            do not check the character or characters which follow the parsed token.
            </p>
            <p class="body">
            In the absence of an explicit setting, the regular expression pattern
            '\W' (non-alphanumeric characters) is used for terminal symbols whose
            <see cref="P:Lexing.Regex
            property is set to 'ReservedKeyword', 'ContextSensitiveKeyword', or 'Identifier'.
            </p>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the <see cref="P:Lexing.Regex
            </exception>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Returns the resolved value of the
            <see cref="P:Lexing.Regex
            property.
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets the value which determines the how the <see cref="P:Lexing.Regex
            </summary>
            <seealso cref="P:Lexing.Regex
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Returns or sets a boolean value which indicates whether tokens produced
            by the lexer for this symbol have length.
            </summary>
            <remarks>
            <p class="body">
            The ConsumesText property makes it possible to use the
            <see cref="P:Lexing.Regex
            property strictly to define matching criteria, while preventing the lexer
            from consuming the text that it matches. For example, to support languages
            which consider newlines to be significant content, a terminal symbol could
            be created with a regex pattern for newlines, and a value of false for
            ConsumesText. During the lexical analysis phase, text that meets the criteria
            defined for the symbol would be matched as usual, but the token produced
            would have zero length, and the input stream left unaffected.
            </p>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the <see cref="P:Lexing.Regex
            </exception>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets the value indicating whether the <see cref="T:Lexing.Regex
            </summary>
            <seealso cref="P:Lexing.Regex
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets the value indicating whether the <see cref="T:Lexing.Regex
            </summary>
            <seealso cref="P:Lexing.Regex
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets the value indicating whether the tokens produced when the <see cref="T:Lexing.Regex
            parsed document represent significant content.
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets the value indicating whether the <see cref="T:Lexing.Regex
            </summary>
            <seealso cref="P:Lexing.Regex
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets or sets the value which defines the language element for tokens generated by this symbol.
            </summary>
            <remarks>
            <p class="note">
            <b>Note:</b> The value cannot be set to EndOfStream or NewLine, as these values are reserved for the 
            <see cref="P:Lexing.Regex
            <see cref="P:Lexing.Regex
            </p>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the <see cref="P:Lexing.Regex
            </exception>
            <exception cref="T:System.ArgumentException">
            Occurs when the value assigned is not defined in the <see cref="T:Lexing.Regex
            or it is EndOfStream or NewLine, as those values are reserved.
            </exception>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Returns or sets a string which defines the character or characters
            which must appear at the beginning of the input stream in order for
            this symbol to parse successfully.
            </summary>
            <remarks>
            <p class="body">
            This property is only applicable for terminal symbols whose
            <see cref="P:Lexing.Regex
            property is set to 'RegularExpression', since unambiguous lookahead
            criteria is already defined for literal string matching. In cases where the
            pattern to be matched always begins with the same character or characters,
            this property can be used to provide a hint to the lexer, so that this
            terminal symbol is only evaluated in cases where the next character(s) in the
            input stream match the value of this property. This can improve performance by
            reducing the number of string comparisons during the scanning/Lexing.Regex phase.
            </p>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Occurs when the <see cref="P:Lexing.Regex
            </exception>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets the value associated with the <see cref="T:Lexing.Regex
            depending on the <see cref="P:Lexing.Regex
            </summary>
            <seealso cref="P:Lexing.Regex
        </member>
        <member name="T:Lexing.Regex
            <summary>
            Structure containing zero-based line and character offsets that uniquely idenity a character location.
            </summary>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Instantiates a new <see cref="T:Lexing.Regex
            </summary>
            <param name="line">The zero-based line offset within the document.</param>
            <param name="character">The zero-based character offset within the line.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If line or character is less than 0.</exception>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Returns the hash code of the structure.
            </summary>
            <returns>A hash code for this instance</returns>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Compares the specified object to this object to see if they are equivalent.
            </summary>
            <param name="obj">The object to compare</param>
            <returns>True if the objects are equal; otherwise false</returns>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Compares the values of two <see cref="T:Lexing.Regex
            </summary>
            <param name="location1">The first structure</param>
            <param name="location2">The other structure</param>
            <returns>true if the two instances are equal; otherwise false</returns>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Compares the values of two <see cref="T:Lexing.Regex
            </summary>
            <param name="location1">The first structure</param>
            <param name="location2">The other structure</param>
            <returns>true if the two instances are not equal; otherwise false</returns>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Returns the string representation of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Returns the zero-based character number in the line (read-only).
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Returns the zero-based line number (read-only).
            </summary>
        </member>
        <member name="T:Lexing.Regex
            <summary>
            Structure containing an offset and length that identify a run of text within a document
            </summary>
        </member>
        <member name="F:Lexing.Regex
            <summary>
            Returns a span tha represents all the text.
            </summary>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Instantiates a new <see cref="T:Lexing.Regex
            </summary>
            <param name="offset">The zero-based offset into the document</param>
            <param name="length">The number of characters in the span (can be zero or negative)</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If offset is less than 0 or the offset + length is less than 0.</exception>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Returns the hash code of the structure.
            </summary>
            <returns>A hash code for this instance</returns>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Compares the specified object to this object to see if they are equivalent.
            </summary>
            <param name="obj">The object to compare</param>
            <returns>True if the objects are equal; otherwise false</returns>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Compares the relative values of two <see cref="T:Lexing.Regex
            </summary>
            <param name="span">The first structure</param>
            <param name="other">The other structure</param>
            <returns>true if the span is greater than other</returns>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Compares the relative values of two <see cref="T:Lexing.Regex
            </summary>
            <param name="span">The first structure</param>
            <param name="other">The other structure</param>
            <returns>true if the span is less than other</returns>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Compares the values of two <see cref="T:Lexing.Regex
            </summary>
            <param name="span1">The first structure</param>
            <param name="span2">The other structure</param>
            <returns>true if the two instances are equal; otherwise false</returns>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Compares the values of two <see cref="T:Lexing.Regex
            </summary>
            <param name="span1">The first structure</param>
            <param name="span2">The other structure</param>
            <returns>true if the two instances are not equal; otherwise false</returns>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Returns the string representation of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Determines if a span is completely contained within this span.
            </summary>
            <param name="span">The span to test.</param>
            <returns>true is the span is completely contained within this span, otherwise false.</returns>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Determines if a offset is contained within this span.
            </summary>
            <param name="offset">The offset to test.</param>
            <returns>true is the offset is contained within this span, otherwise false.</returns>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Returns a span that contains just the intersect between this span and another.
            </summary>
            <param name="span">The span to intersect.</param>
            <returns>A new TextSpan with the intersect or null if the spans don't intersect</returns>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Returns true is the span intersects with this span.
            </summary>
            <param name="span">The span to test.</param>
            <returns>true if the spans intersect, otherwise false</returns>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Returns a span that contains just the overlap between this span and another.
            </summary>
            <param name="span">The span to overlap.</param>
            <returns>A new TextSpan with the overlap or null if the spans don't overlap</returns>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Returns true is the span overlaps with this span.
            </summary>
            <param name="span">The span to test.</param>
            <returns>true if the spans overlap, otherwise false</returns>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Returns the normalized end offset (read-only).
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Returns the length of the text span (read-only).
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> if the length is negative that means the <see cref="P:Lexing.Regex
            </remarks>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Returns the zero-based offset from the beginning of the document (read-only).
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Returns the normalized start offset (read-only).
            </summary>
        </member>
        <member name="T:Lexing.Regex
            <summary>
            Encapsulates the properties of a token produced during lexical analysis.
            </summary>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Compares the specified object to this object to see if they are equivalent.
            </summary>
            <param name="obj">The object to compare</param>
            <returns>True if the objects are equal; otherwise false</returns>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Returns the hash code of the object.
            </summary>
            <returns>A hash code for this instance</returns>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Compares the values of two <see cref="T:Lexing.Regex
            </summary>
            <param name="token1">The first structure</param>
            <param name="token2">The other structure</param>
            <returns>true if the two instances are equal; otherwise false</returns>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Compares the values of two <see cref="T:Lexing.Regex
            </summary>
            <param name="token1">The first structure</param>
            <param name="token2">The other structure</param>
            <returns>true if the two instances are not equal; otherwise false</returns>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Returns the string representation of this object.
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Returns a boolean value indicating whether this token is empty.
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Returns a boolean value indicating whether this token is missing.
            </summary>
            <remarks>
            <p class="body">
            When a lexer state has been entered, and a newline is encountered
            before the symbol which exits that lexer state, the token which is
            expected to exit that lexer state is then known to be missing. In this
            case, a Token is created for that exit symbol, with a zero length,
            and returned from the GetNextToken method. Such tokens are considered
            to be missing.
            </p>
            </remarks>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Returns the <see cref="T:Lexing.Regex
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Returns the length of the string which this token represents.
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Returns the overall character offset from the beginning of the document to the start of this token (read-only).
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Retirnms the span of the token within the document (read-only).
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Returns the text which this token represents.
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Returns the 
            <see cref="T:Lexing.Regex
            which produced this token.
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Returns the 
            <see cref="T:Lexing.Regex
            which defines the state from which this token was produced.
            </summary>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Compares the specified object to this object to see if they are equivalent.
            </summary>
            <param name="obj">The object to compare</param>
            <returns>True if the objects are equal; otherwise false</returns>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Returns the hash code of the object.
            </summary>
            <returns>A hash code for this instance</returns>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Compares the values of two <see cref="T:Lexing.Regex
            </summary>
            <param name="word1">The first structure</param>
            <param name="word2">The other structure</param>
            <returns>true if the two instances are equal; otherwise false</returns>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Compares the values of two <see cref="T:Lexing.Regex
            </summary>
            <param name="word1">The first structure</param>
            <param name="word2">The other structure</param>
            <returns>true if the two instances are not equal; otherwise false</returns>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Returns the string representation of this object.
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Returns the zero-based offset for this substring, as relative
            to the first character of the token which contains it.
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Returns the length of the substring.
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Returns the text.
            </summary>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Returns the specified substring.
            </summary>
            <param name="start">The zero-based position of the first character in the string to be returned.</param>
            <param name="length">The length of the string to be returned.</param>
            <returns>The specified substring.</returns>
        </member>
        <member name="T:Lexing.Regex
            <summary>
            Encapsulates an error that was encountered while attempting to
            import a grammar definition script.
            </summary>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Returns the string representation of this object.
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets the position of the error within the EBNF text.
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets the column within the line of the error.
            </summary>
            <seealso cref="P:Lexing.Regex
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets the human-readable description of the error.
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets the line number of the error within the EBNF text.
            </summary>
            <seealso cref="P:Lexing.Regex
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Returns a constant which identifies the reason for the error.
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets the erroneous text in the EBNF file.
            </summary>
        </member>
        <member name="T:Lexing.Regex
            <summary>
            Describes the result of a grammar definition import operation.
            </summary>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Returns the string representation of this object.
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets the read-only collection of <see cref="T:Lexing.Regex
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets the grammar parsed from the EBNF file if there were no errors in the file.
            </summary>
            <seealso cref="P:Lexing.Regex
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Get the value indicating whether the import operation was successful. 
            If True, <see cref="P:Lexing.Regex
            </summary>
            <seealso cref="P:Lexing.Regex
        </member>
        <member name="T:Lexing.Regex
            <summary>
            Constants which describe the reason for an import error.
            </summary>
        </member>
        <member name="F:Lexing.Regex
            <summary>
            An attribute block has been defined in the middle of a rule.
            </summary>
        </member>
        <member name="F:Lexing.Regex
            <summary>
            The left-hand side of the statement contains an identifier which has already been used.
            </summary>
        </member>
        <member name="F:Lexing.Regex
            <summary>
            The enter symbol for the lexer state is already used to enter another lexer state.
            </summary>
        </member>
        <member name="F:Lexing.Regex
            <summary>
            Two lexer states with the same name have been declared.
            </summary>
        </member>
        <member name="F:Lexing.Regex
            <summary>
            More than one
            <see cref="T:Lexing.Regex
            has been designated as the 
            <see cref="P:Lexing.Regex
            for the associated grammar.
            </summary>
        </member>
        <member name="F:Lexing.Regex
            <summary>
            The grammar definition is empty.
            </summary>
        </member>
        <member name="F:Lexing.Regex
            <summary>
            The symbol representing the end of stream was referenced by a rule that is not the start symbol or the start symbol is not a well-formed start symbol with 
            a single non-terminal symbol followed by the end of stream symbol.
            </summary>
        </member>
        <member name="F:Lexing.Regex
            <summary>
            The grammar, terminals symbols, or lexer state definitions are not at the top of the EBNF file.
            </summary>
        </member>
        <member name="F:Lexing.Regex
            <summary>
            An grouping symbol, such as an open parenthesis or closing parenthesis was encountered without a corresponding opening/closing symbol.
            </summary>
        </member>
        <member name="F:Lexing.Regex
            <summary>
            The specified value is not valid for the property to which it is being assigned.
            </summary>
        </member>
        <member name="F:Lexing.Regex
            <summary>
            A terminal symbol was designated as a regular expression pattern, but the pattern specified was not valid.
            </summary>
        </member>
        <member name="F:Lexing.Regex
            <summary>
            A SpecialSequence containing extensible markup language (XML) content
            contained malformed or otherwise invalid content.
            </summary>
        </member>
        <member name="F:Lexing.Regex
            <summary>
            The statement does not contain equals sign following the declaration.
            All statements must contain one and only one assignment symbol following the declaration.
            </summary>
        </member>
        <member name="F:Lexing.Regex
            <summary>
            The left-hand side of the statement cannot be parsed into a valid identifier.
            All statements must begin with a valid identifier which is not enclosed in quotes.
            </summary>
        </member>
        <member name="F:Lexing.Regex
            <summary>
            The statement does not contain a semicolon).
            </summary>
        </member>
        <member name="F:Lexing.Regex
            <summary>
            The EnterSymbol element of a lexer state definition is missing.
            </summary>
        </member>
        <member name="F:Lexing.Regex
            <summary>
            A declaration is missing a value for the 'Name' property.
            </summary>
        </member>
        <member name="F:Lexing.Regex
            <summary>
            An operator is expected at the specified location. This is usually caused by the occurrence of two adjacent operands.
            </summary>
        </member>
        <member name="F:Lexing.Regex
            <summary>
            An XML tag has no value specified.
            </summary>
        </member>
        <member name="F:Lexing.Regex
            <summary>
            A declaration is missing a value for the 'Value' property.
            </summary>
        </member>
        <member name="F:Lexing.Regex
            <summary>
            An opening quote symbol was encountered without a closing one.
            </summary>
        </member>
        <member name="F:Lexing.Regex
            <summary>
            A symbol is referenced which is a well formed start symbol for the grammar. The start symbol can only be referenced
            if it is not defined as having a single production of a non-terminal followed by the end of stream symbol ($).
            </summary>
        </member>
        <member name="F:Lexing.Regex
            <summary>
            An opening XML tag was encountered without a corresponding closing one,
            or a closing XML tag was encountered without a corresponding opening one.
            </summary>
        </member>
        <member name="F:Lexing.Regex
            <summary>
            A reference to an identifier that was never declared was encountered.
            </summary>
        </member>
        <member name="F:Lexing.Regex
            <summary>
            The grammar contains an equals sign in an area where it is not expected.
            </summary>
        </member>
        <member name="F:Lexing.Regex
            <summary>
            The grammar contains an identifier in an area where it is not expected.
            </summary>
        </member>
        <member name="F:Lexing.Regex
            <summary>
            The grammar contains an operator in an area where it is not expected.
            </summary>
        </member>
        <member name="F:Lexing.Regex
            <summary>
            The right-hand side of the statement contains content which is not recognizable under the current grammar notation.
            </summary>
        </member>
        <member name="F:Lexing.Regex
            <summary>
            A well-formed XML tag was encountered, but its name was not recognized.
            </summary>
        </member>
        <member name="T:Lexing.Regex
            <summary>
            Representing a custom language generated from a <see cref="T:Lexing.Regex
            </summary>
            <remarks>
            <p class="body">
            To create a custom language which is created from generated code and therefore has shorter initialization time, see 
            <see cref="T:Lexing.Regex
            </p>
            </remarks>
            <seealso cref="T:Lexing.Regex
        </member>
        <member name="T:Lexing.Regex
            <summary>
            An abstract base class representing a language that has a specific set of rules (i.e. <see cref="P:Lexing.Regex
            </summary>
            <seealso cref="P:Lexing.Regex
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Instantiates a new instance of <see cref="T:Lexing.Regex
            </summary>
            <param name="grammar">The associated grammar.</param>
            <exception cref="T:System.ArgumentNullException">If grammar parameter is null,</exception>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Returns the string representation of this object.
            </summary>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Returns the parse table for a GLR parser.
            </summary>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Generates identifiers for each symbol in the grammar.
            </summary>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Returns a customized error alias for the specified symbol or null to use the default alias.
            </summary>
            <remarks>
            <p class="body">
            If null is returned, the default alias for non-terminal symbols is the symbol name. For terminal symbols
            it is the value for literal comparison terminals and the symbol name for regular expression comparison 
            terminals.
            </p>
            </remarks>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Gets called once on each instance to let derived <see cref="T:Lexing.Regex
            <see cref="P:Lexing.Regex
            </summary>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Gets called when an error is detected during the parse.
            </summary>
            <remarks>
            <p class="body">
            The errors in the specified <paramref name="context"/> can be modified, added, or removed.
            </p>
            </remarks>
            <param name="context">The contextual information about the error which was detected.</param>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Gets called when a global ambiguity is detected while parsing a document.
            </summary>
            <remarks>
            <p class="body">
            A global ambiguity occurs when the same span of text in a document can be interpreted in two or more different ways based on the grammar
            rules for the language and the context in which text occurs. The specified <paramref name="context"/> contains two alternate parses for
            the text (if there are more than two alternate parses, this method will be called multiple times). A derived implementation of this method 
            can determine which of the two alternate parse sub-trees should be used in the final tree by setting
            <see cref="P:Lexing.Regex
            </p>
            <p class="body">
            A grammar creator can override this method in a derived language to get notified of global ambiguities and know which rules need to be
            re-written or mark with priority.
            </p>
            </remarks>
            <param name="context">An object containing the relevant information about the global ambiguity.</param>
            <seealso cref="P:Lexing.Regex
            <seealso cref="E:Lexing.Regex
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets the <see cref="P:Lexing.Regex
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets a <see cref="P:Lexing.Regex
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Returns a boolean value indicating whether this language supports parsing.
            </summary>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Instantiates a new instance of <see cref="T:Lexing.Regex
            </summary>
            <param name="grammar">The associated grammar.</param>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="grammar"/> is null.
            </exception>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Gets called when a global ambiguity is detected while parsing a document.
            </summary>
            <remarks>
            <p class="body">
            A global ambiguity occurs when the same span of text in a document can be interpreted in two or more different ways based on the grammar
            rules for the language and the context in which text occurs. The specified <paramref name="context"/> contains two alternate parses for
            the text (if there are more than two alternate parses, this method will be called multiple times). A derived implementation of this method 
            can determine which of the two alternate parse sub-trees should be used in the final tree by setting
            <see cref="P:Lexing.Regex
            </p>
            <p class="body">
            A grammar creator can override this method in a derived language to get notified of global ambiguities and know which rules need to be
            re-written or mark with priority.
            </p>
            </remarks>
            <param name="context">An object containing the relevant information about the global ambiguity.</param>
            <seealso cref="P:Lexing.Regex
            <seealso cref="E:Lexing.Regex
        </member>
        <member name="E:Lexing.Regex
            <summary>
            Occurs when a global ambiguity is detected while parsing a document.
            </summary>
            <remarks>
            <p class="body">
            A global ambiguity occurs when the same span of text in a document can be interpreted in two or more different ways based on the grammar
            rules for the language and the context in which text occurs. The <see cref="T:Lexing.Regex
            alternate parses for the text (if there are more than two alternate parses, this event will be fired multiple times). An event handler can 
            determine which of the two alternate parse sub-trees should be used in the final tree by setting
            <see cref="P:Lexing.Regex
            </p>
            <p class="body">
            A grammar creator can handle this event to get notified of global ambiguities and know which rules need to be re-written or mark with priority.
            </p>
            </remarks>
            <seealso cref="P:Lexing.Regex
            <seealso cref="M:Lexing.Regex
        </member>
        <member name="T:Lexing.Regex
            <summary>
            EBNFOnlyLanguage class (auto-generated 12/22/2012 1:43:57 AM)
            </summary>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Creates a new instance of the EBNFOnlyLanguage class.
            </summary>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Initializes the properties of the associated Grammar.
            </summary>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Creates the TerminalSymbols for the associated Grammar.
            </summary>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Creates the LexerStates for the associated Grammar.
            </summary>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Creates the CreateNonTerminalSymbols for the associated Grammar.
            </summary>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Creates the syntax rules for the associated Grammar.
            </summary>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Creates the productions for the associated Grammar.
            </summary>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Returns the parse table for a GLR parser..
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Returns a static instance of the language (read-only)
            </summary>
        </member>
        <member name="T:Lexing.Regex
            <summary>
            A thread-safe class which manages a collection of services for a <see cref="T:Lexing.Regex
            services to be registered by a string key or by a Type.
            </summary>
            <seealso cref="P:Lexing.Regex
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Returns a collection of registered services.
            </summary>
            <returns>A collection of registered services.</returns>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Returns a collection of registered service types.
            </summary>
            <returns>A collection of registered service types.</returns>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Returns a collection of registered service keys.
            </summary>
            <returns>A collection of registered service keys.</returns>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Gets a service which was registered with a specific Type.
            </summary>
            <typeparam name="T">The Type which was used as a key to register the service.</typeparam>
            <returns>The service instance if the service is found otherwise null.</returns>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Gets a service which was registered with a specific Type.
            </summary>
            <param name="serviceType">The Type which was used as a key to register the service.</param>
            <exception cref="T:System.ArgumentNullException">
            Occurs when the specified, <paramref name="serviceType"/> is null.
            </exception>
            <returns>The service instance if the service is found otherwise null.</returns>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Gets a service registered with the specified key.
            </summary>
            <param name="serviceKey">The key of the service to get.</param>
            <returns>The service instance if the service is found otherwise null.</returns>
            <exception cref="T:System.ArgumentNullException">
            Occurs when the specified <paramref name="serviceKey"/> is null or empty.
            </exception>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Registers a specific type of service instance.
            </summary>
            <remarks>
            <para class="body">Only one service instance of a specific type can be registered.</para>
            </remarks>
            <param name="service">The service instance to register.</param>
            <typeparam name="T">The Type used as a key to register the the service.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            Occurs when the specified <paramref name="service"/> is null.
            </exception>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Registers a specific type of service instance.
            </summary>
            <remarks>
            <para class="body">Only one service instance of a specific type can be registered.</para>
            </remarks>
            <param name="serviceType">The Type used as a key to register the the service.</param>
            <param name="service">The service instance to register.</param>
            <exception cref="T:System.ArgumentNullException">
            Occurs when the specified <paramref name="serviceType"/> is null.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Occurs when the specified <paramref name="service"/> is null.
            </exception>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Registers a service with a case-sensitively unique string key.
            </summary>
            <remarks>
            <para class="body">
            Each non-core service must be registered with a case-sensitively unique string key. There are no requirements on the format of the key.
            </para>
            </remarks>
            <param name="serviceKey">The case-sensitively unique string key of the service to register.</param>
            <param name="service">The service instance to register.</param>
            <exception cref="T:System.ArgumentNullException">
            Occurs when the specified <paramref name="serviceKey"/> is null or empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Occurs when the specified <paramref name="service"/> is null.
            </exception>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Unregisters all currently registered services.
            </summary>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Unregisters a service of a specific type.
            </summary>
            <typeparam name="T">The Type which was used as a key to register the service.</typeparam>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Unregisters a service of a specific type.
            </summary>
            <param name="serviceType">The Type which was used as a key to register the service.</param>
            <exception cref="T:System.ArgumentNullException">
            Occurs when the specified, <paramref name="serviceType"/> is null.
            </exception>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Unregisters a service with a case-sensitively unique string key.
            </summary>
            <param name="serviceKey">The case-sensitively unique string key of the service to unregister.</param>
            <exception cref="T:System.ArgumentNullException">
            Occurs when the specified <paramref name="serviceKey"/> is null or empty.
            </exception>
        </member>
        <member name="E:Lexing.Regex
            <summary>
            Raised after a service is registered.
            </summary>
            <seealso cref="T:Lexing.Regex
        </member>
        <member name="E:Lexing.Regex
            <summary>
            Raised after a service is unregistered.
            </summary>
            <seealso cref="T:Lexing.Regex
        </member>
        <member name="T:Lexing.Regex
            <summary>
            PlainTextLanguage class (auto-generated 12/22/2012 1:43:57 AM)
            </summary>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Creates a new instance of the PlainTextLanguage class.
            </summary>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Initializes the properties of the associated Grammar.
            </summary>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Creates the TerminalSymbols for the associated Grammar.
            </summary>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Creates the CreateNonTerminalSymbols for the associated Grammar.
            </summary>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Creates the syntax rules for the associated Grammar.
            </summary>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Creates the productions for the associated Grammar.
            </summary>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Returns the parse table for a GLR parser..
            </summary>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Gets called once on each instance to let derived <see cref="T:Lexing.Regex
            <see cref="T:Lexing.Regex
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Returns a static instance of the language (read-only)
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Returns a boolean value indicating whether this language supports parsing.
            </summary>
        </member>
        <member name="T:Lexing.Regex
            <summary>
            RegexLanguage class (auto-generated 12/22/2012 1:43:57 AM)
            </summary>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Creates a new instance of the RegexLanguage class.
            </summary>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Initializes the properties of the associated Grammar.
            </summary>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Creates the TerminalSymbols for the associated Grammar.
            </summary>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Creates the CreateNonTerminalSymbols for the associated Grammar.
            </summary>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Creates the syntax rules for the associated Grammar.
            </summary>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Creates the productions for the associated Grammar.
            </summary>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Returns the parse table for a GLR parser..
            </summary>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Gets called when an error is detected during the parse.
            </summary>
            <remarks>
            <p class="body">
            The errors in the specified <paramref name="context"/> can be modified, added, or removed.
            </p>
            </remarks>
            <param name="context">The contextual information about the error which was detected.</param>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Gets called when a global ambiguity is detected while parsing a document.
            </summary>
            <remarks>
            <p class="body">
            A global ambiguity occurs when the same span of text in a document can be interpreted in two or more different ways based on the grammar
            rules for the language and the context in which text occurs. The specified <paramref name="context"/> contains two alternate parses for
            the text (if there are more than two alternate parses, this method will be called multiple times). A derived implementation of this method 
            can determine which of the two alternate parse sub-trees should be used in the final tree by setting
            <see cref="P:Lexing.Regex
            </p>
            <p class="body">
            A grammar creator can override this method in a derived language to get notified of global ambiguities and know which rules need to be
            re-written or mark with priority.
            </p>
            </remarks>
            <param name="context">An object containing the relevant information about the global ambiguity.</param>
            <seealso cref="P:Lexing.Regex
            <seealso cref="E:Lexing.Regex
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Returns a static instance of the language (read-only)
            </summary>
        </member>
        <member name="T:Lexing.Regex
            <summary>
            Represents a global ambiguity detected while parsing a document.
            </summary>
            <remarks>
            <p class="body">
            A global ambiguity occurs when the same span of text in a document can be interpreted in two or more different ways based on the grammar
            rules for the language and the context in which text occurs. This object contains two alternate parses for the text (if there are more 
            than two alternate parses, multiple contexts will be created). Code handling global ambiguities can determine which of the two alternate 
            parse sub-trees should be used in the final tree by setting <see cref="P:Lexing.Regex
            </p>
            </remarks>
            <seealso cref="M:Lexing.Regex
            <seealso cref="E:Lexing.Regex
            <seealso cref="P:Infragistics.Documents.GlobalAmbiguityDetectedEventArgs.Context"/>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets the value indicating whether the parser is currently handling errors, which could produce extra global ambiguities that
            wouldn't occur during a normal parse.
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets or sets the root node of the sub-tree which should be chosen when constructing the final parse tree.
            </summary>
            <remarks>
            <p class="body">
            A global ambiguity occurs when the same span of text in a document can be interpreted in two or more different ways based on the grammar
            rules for the language and the context in which text occurs. Code handling global ambiguities can determine which sub-trees should be used 
            in the final tree by setting PreferredSubTreeRoot.
            </p>
            <p class="note">
            <b>Note:</b> The only valid values are null or the instances returned by <see cref="P:Lexing.Regex
            </p>
            </remarks>
            <exception cref="T:System.ArgumentException">
            Occurs when the specified value is not null, <see cref="P:Lexing.Regex
            </exception>
            <seealso cref="P:Lexing.Regex
            <seealso cref="P:Lexing.Regex
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets the root node of the first sub-tree in which the ambiguous text can be parsed.
            </summary>
            <remarks>
            <p class="body">
            To have the first sub-tree used in the final parse tree for the document, set the value on the <see cref="P:Lexing.Regex
            </p>
            </remarks>
            <seealso cref="P:Lexing.Regex
            <seealso cref="P:Lexing.Regex
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets the root node of the second sub-tree in which the ambiguous text can be parsed.
            </summary>
            <remarks>
            <p class="body">
            To have the second sub-tree used in the final parse tree for the document, set the value on the <see cref="P:Lexing.Regex
            </p>
            </remarks>
            <seealso cref="P:Lexing.Regex
            <seealso cref="P:Lexing.Regex
        </member>
        <member name="T:Lexing.Regex
            <summary>
            Represents and error, warning, or information associated with a node in the parse tree.
            </summary>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Creates a new <see cref="T:Lexing.Regex
            </summary>
            <param name="span">The span indicating the location of the error.</param>
            <param name="message">The message associated with the error.</param>
            <param name="severity">The severity level of the error.</param>
            <exception cref="T:System.ArgumentNullException">
            Occurs when the <paramref name="span"/>'s Snapshot value is null or <paramref name="message"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Occurs when <paramref name="severity"/> is not defined in the <see cref="T:Lexing.Regex
            </exception>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Gets a string representation of the error.
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets or sets the message associated with the error.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            Occurs when the specified value is null.
            </exception>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets or sets the severity level of the error.
            </summary>
            <exception cref="T:System.ArgumentException">
            Occurs when the specified value is not defined in the <see cref="T:Lexing.Regex
            </exception>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets or sets the span indicating the location of the error.
            </summary>
        </member>
        <member name="T:Lexing.Regex
            <summary>
            Represents and error, warning, or information associated with a node in the parse tree.
            </summary> 
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Gets a string representation of the error.
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets the message associated with the error.
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets the <see cref="T:Lexing.Regex
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets the severity level of the error.
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets the <see cref="P:Lexing.Regex
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets the <see cref="T:Lexing.Regex
            </summary>
        </member>
        <member name="T:Lexing.Regex
            <summary>
            Represents information related to error(s) which have occurred during the parse.
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets the collection of errors which have occurred. 
            </summary>
            <remarks>
            <p class="body">
            This collection or the errors within it can be modified to change what it shown to the user.
            </p>
            </remarks>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets the value indicating if the error represents a missing node which was created by the parse to complete the parse tree.
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets the value indicating if the error represents a token which was skipped because it was not expected in a specific context.
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets the <see cref="P:Lexing.Regex
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets the <see cref="T:Lexing.Regex
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets the terminal or non-terminal symbol which is associated with the error(s).
            </summary>
        </member>
        <member name="T:Lexing.Regex
            <summary>
            For generated language class usage only.
            </summary>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            For generated language class usage only.
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets the <see cref="T:Lexing.Regex
            </summary> 
        </member>
        <member name="T:Lexing.Regex
            <summary>
            Encapsulates a discrete state for a GLR parser.
            </summary>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Creates a new <see cref="T:Lexing.Regex
            </summary>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Creates a new <see cref="T:Lexing.Regex
            </summary>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Returns the string representation of this object.
            </summary>
        </member>
        <member name="T:Lexing.Regex
            <summary>
            Encapsulates an ambiguous parse action.
            </summary>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Creates a new <see cref="T:Lexing.Regex
            </summary>
        </member>
        <member name="T:Infragistics.Documents.ClassificationType">
            <summary>
            A class that defines the details of a text classification.
            </summary>
            <seealso cref="T:Infragistics.Documents.Tagging.ClassificationTag"/>
            <seealso cref="T:Infragistics.Documents.Tagging.ClassificationTagger"/>
            <seealso cref="T:Infragistics.Documents.Tagging.ClassificationTaggerProvider"/>
        </member>
        <member name="M:Infragistics.Documents.ClassificationType.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">The name of the classification type.</param>
            <param name="description">The description of the classification type.</param>
        </member>
        <member name="M:Infragistics.Documents.ClassificationType.ToString">
            <summary>
            Returns a string representation of the object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Documents.ClassificationType.FromLanguageElement(Lexing.Regex
            <summary>
            Returns the <see cref="T:Infragistics.Documents.ClassificationType"/> that corresponds to the specified <see cref="T:Lexing.Regex
            </summary>
            <param name="languageElement">The <see cref="T:Lexing.Regex
            <returns>The <see cref="T:Infragistics.Documents.ClassificationType"/> that corresponds to the specified <see cref="T:Lexing.Regex
        </member>
        <member name="P:Infragistics.Documents.ClassificationType.Description">
            <summary>
            Returns a textual description of this <see cref="T:Infragistics.Documents.ClassificationType"/>
            </summary>
        </member>
        <member name="P:Infragistics.Documents.ClassificationType.Name">
            <summary>
            Returns a name that can be used to identify this <see cref="T:Infragistics.Documents.ClassificationType"/>
            </summary>
        </member>
        <member name="P:Infragistics.Documents.ClassificationType.Comment">
            <summary>
            Returns a Comment <see cref="T:Infragistics.Documents.ClassificationType"/>
            </summary>
        </member>
        <member name="P:Infragistics.Documents.ClassificationType.CompilerError">
            <summary>
            Returns a CompilerError <see cref="T:Infragistics.Documents.ClassificationType"/>
            </summary>
        </member>
        <member name="P:Infragistics.Documents.ClassificationType.DateLiteral">
            <summary>
            Returns a DateLiteral <see cref="T:Infragistics.Documents.ClassificationType"/>
            </summary>
        </member>
        <member name="P:Infragistics.Documents.ClassificationType.DocCommentStart">
            <summary>
            Returns a DocCommentStart <see cref="T:Infragistics.Documents.ClassificationType"/>
            </summary>
        </member>
        <member name="P:Infragistics.Documents.ClassificationType.DocCommentTag">
            <summary>
            Returns a DocCommentTag <see cref="T:Infragistics.Documents.ClassificationType"/>
            </summary>
        </member>
        <member name="P:Infragistics.Documents.ClassificationType.DocCommentText">
            <summary>
            Returns a DocCommentText <see cref="T:Infragistics.Documents.ClassificationType"/>
            </summary>
        </member>
        <member name="P:Infragistics.Documents.ClassificationType.Identifier">
            <summary>
            Returns an Identifier <see cref="T:Infragistics.Documents.ClassificationType"/>
            </summary>
        </member>
        <member name="P:Infragistics.Documents.ClassificationType.Keyword">
            <summary>
            Returns a Keyword <see cref="T:Infragistics.Documents.ClassificationType"/>
            </summary>
        </member>
        <member name="P:Infragistics.Documents.ClassificationType.Number">
            <summary>
            Returns a Number <see cref="T:Infragistics.Documents.ClassificationType"/>
            </summary>
        </member>
        <member name="P:Infragistics.Documents.ClassificationType.NumericLiteral">
            <summary>
            Returns a NumericLiteral <see cref="T:Infragistics.Documents.ClassificationType"/>
            </summary>
        </member>
        <member name="P:Infragistics.Documents.ClassificationType.Operator">
            <summary>
            Returns an Operator <see cref="T:Infragistics.Documents.ClassificationType"/>
            </summary>
        </member>
        <member name="P:Infragistics.Documents.ClassificationType.ParseError">
            <summary>
            Returns a ParseError <see cref="T:Infragistics.Documents.ClassificationType"/>
            </summary>
        </member>
        <member name="P:Infragistics.Documents.ClassificationType.PreprocessorDirective">
            <summary>
            Returns a PreprocessorDirective <see cref="T:Infragistics.Documents.ClassificationType"/>
            </summary>
        </member>
        <member name="P:Infragistics.Documents.ClassificationType.PreprocessorDirectiveText">
            <summary>
            Returns a PreprocessorDirectiveText <see cref="T:Infragistics.Documents.ClassificationType"/>
            </summary>
        </member>
        <member name="P:Infragistics.Documents.ClassificationType.Punctuation">
            <summary>
            Returns a Punctuation <see cref="T:Infragistics.Documents.ClassificationType"/>
            </summary>
        </member>
        <member name="P:Infragistics.Documents.ClassificationType.StringLiteral">
            <summary>
            Returns a StringLiteral <see cref="T:Infragistics.Documents.ClassificationType"/>
            </summary>
        </member>
        <member name="P:Infragistics.Documents.ClassificationType.Undefined">
            <summary>
            Returns an Undefined <see cref="T:Infragistics.Documents.ClassificationType"/>
            </summary>
        </member>
        <member name="P:Infragistics.Documents.ClassificationType.UndefinedError">
            <summary>
            Returns an UndefinedError <see cref="T:Infragistics.Documents.ClassificationType"/>
            </summary>
        </member>
        <member name="P:Infragistics.Documents.ClassificationType.Unrecognized">
            <summary>
            Returns an Unrecognized <see cref="T:Infragistics.Documents.ClassificationType"/>
            </summary>
        </member>
        <member name="P:Infragistics.Documents.ClassificationType.Warning">
            <summary>
            Returns a Warning <see cref="T:Infragistics.Documents.ClassificationType"/>
            </summary>
        </member>
        <member name="P:Infragistics.Documents.ClassificationType.Whitespace">
            <summary>
            Returns a Whitespace <see cref="T:Infragistics.Documents.ClassificationType"/>
            </summary>
        </member>
        <member name="T:Infragistics.Documents.NormalizedSnapshotSpanCollection">
            <summary>
            Returns a collection of <see cref="T:Infragistics.Documents.SnapshotSpan"/>s.
            </summary>
        </member>
        <member name="T:Infragistics.Documents.LineScanType">
            <summary>
            Determines where to set the <see cref="T:Infragistics.Documents.TextDocumentSnapshotScanner">Scanner</see>'s <see cref="P:Infragistics.Documents.TextDocumentSnapshotScanner.CurrentOffset">CurrentOffset</see> relative to the current line position.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.LineScanType.CurrentLineEnd">
            <summary>
            Seek to the end of the current line.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.LineScanType.CurrentLineStart">
            <summary>
            Seek to the beginning of the current line.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.LineScanType.NextLineEnd">
            <summary>
            Seek to the end of the next line.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.LineScanType.NextLineStart">
            <summary>
            Seek to the beginning of the next line.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.LineScanType.PreviousLineEnd">
            <summary>
            Seek to the end of the previous line.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.LineScanType.PreviousLineStart">
            <summary>
            Seek to the beginning of the previous line.
            </summary>
        </member>
        <member name="T:Infragistics.Documents.NewLineSequence">
            <summary>
            Determines the sequence of characters used to delimit lines in a TextDocument.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.NewLineSequence.EnvironmentNewLine">
            <summary>
            The value returns from <b>Enviornment.NewLine</b>
            </summary>
        </member>
        <member name="F:Infragistics.Documents.NewLineSequence.LineFeed">
            <summary>
            A single line feed character (0x0A)
            </summary>
        </member>
        <member name="F:Infragistics.Documents.NewLineSequence.CarriageReturn">
            <summary>
            A single carriage return character (0x0D)
            </summary>
        </member>
        <member name="F:Infragistics.Documents.NewLineSequence.CarriageReturnAndLineFeed">
            <summary>
            2 characters, a carriage return (0x0D) followed by a line feed (0x0A)
            </summary>
        </member>
        <member name="T:Infragistics.Documents.PointTrackingMode">
            <summary>
            Determines how <see cref="T:Infragistics.Documents.SnapshotPoint"/>s track between snapshots.
            </summary>
            <seealso cref="M:Infragistics.Documents.SnapshotPoint.TranslateTo(Infragistics.Documents.TextDocumentSnapshot,Infragistics.Documents.PointTrackingMode)"/>
        </member>
        <member name="F:Infragistics.Documents.PointTrackingMode.Positive">
            <summary>
            The point tracks toward the end of the document. An insertion at the current position pushes the point to the end of the inserted text. If a replacement contains the point, it will end up at the end of the replacement text.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.PointTrackingMode.Negative">
            <summary>
            The point tracks toward the beginning of the document. An insertion at the current position leaves the point unchanged. If a replacement contains the point, it will end up at the beginning of the replacement text.
            </summary>
        </member>
        <member name="T:Infragistics.Documents.SpanTrackingMode">
            <summary>
            Determines how <see cref="T:Infragistics.Documents.SnapshotSpan"/>s track between snapshots.
            </summary>
            <seealso cref="M:Infragistics.Documents.SnapshotSpan.TranslateTo(Infragistics.Documents.TextDocumentSnapshot,Infragistics.Documents.SpanTrackingMode)"/>
        </member>
        <member name="F:Infragistics.Documents.SpanTrackingMode.EdgeExclusive">
            <summary>
            The leading edge uses a positive tracking mode and the trailing edge uses a neagtive tracking mode. This causes the span to not expand when text is inserted at either boundary.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.SpanTrackingMode.EdgeInclusive">
            <summary>
            The leading edge uses a negative tracking mode and the trailing edge uses a positive tracking mode. This causes the span to expand when text is inserted at either boundary.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.SpanTrackingMode.EdgePositive">
            <summary>
            Both edges of the span use a positive tracking mode.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.SpanTrackingMode.EdgeNegative">
            <summary>
            Both edges of the span use a negative tracking mode.
            </summary>
        </member>
        <member name="T:Infragistics.Documents.TabEntryBehavior">
            <summary>
            Determines what gets inserted into a <see cref="T:Infragistics.Documents.TextDocument"/> when a tab key is entered.
            </summary>
            <seealso cref="P:Infragistics.Documents.TextDocument.TabEntryBehavior">TextDocument.TabInsertBehavior</seealso>
            <seealso cref="P:Infragistics.Documents.TextDocument.TabExtent">TextDocument.TabExtent</seealso>
        </member>
        <member name="F:Infragistics.Documents.TabEntryBehavior.KeepTabs">
            <summary>
            When a tab character is entered it is inserted into the document 'as is' (i.e. as a tab character).
            </summary>
        </member>
        <member name="F:Infragistics.Documents.TabEntryBehavior.ReplaceTabsWithSpaces">
            <summary>
            When a tab character is entered it is converted to an appropriate number of spaces in the document based upon the <see cref="P:Infragistics.Documents.TextDocument.TabExtent">TextDocument.TabExtent</see> setting.
            </summary>
        </member>
        <member name="T:Infragistics.Documents.TextChangeSource">
            <summary>
            Identifies the source of a text change.
            </summary>
            <seealso cref="T:Infragistics.Documents.TextChangingEventArgs"/>
            <seealso cref="T:Infragistics.Documents.TextChangedEventArgs"/>
            <seealso cref="P:Infragistics.Documents.TextChangingEventArgs.Source"/>
            <seealso cref="P:Infragistics.Documents.TextChangedEventArgs.Source"/>
        </member>
        <member name="F:Infragistics.Documents.TextChangeSource.Change">
            <summary>
            A method was called on <see cref="T:Infragistics.Documents.TextDocument"/>, e.g. <see cref="M:Infragistics.Documents.TextDocument.Insert(System.Int32,System.String)">Insert</see>, <see cref="M:Infragistics.Documents.TextDocument.Delete(System.Int32,System.Int32)">Delete</see>, <see cref="M:Infragistics.Documents.TextDocument.Append(System.String)">Append</see>, <see cref="M:Infragistics.Documents.TextDocument.FindReplace(System.String,Infragistics.Documents.TextSearchCriteria,System.Int32,System.Boolean)">FindReplace</see> etc.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.TextChangeSource.Undo">
            <summary>
            The <see cref="T:Infragistics.Documents.TextDocument"/>'s <see cref="P:Infragistics.Documents.TextDocument.UndoManager">UndoManager</see>.<see cref="M:Infragistics.Undo.UndoManager.Undo(System.Int32)">Undo</see> method was called.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.TextChangeSource.Redo">
            <summary>
            The <see cref="T:Infragistics.Documents.TextDocument"/>'s <see cref="P:Infragistics.Documents.TextDocument.UndoManager">UndoManager</see>.<see cref="M:Infragistics.Undo.UndoManager.Redo(System.Int32)">Redo</see> method was called.
            </summary>
        </member>
        <member name="T:Infragistics.Documents.TokenScanType">
            <summary>
            Determines where to set the <see cref="T:Infragistics.Documents.TextDocumentSnapshotScanner">Scanner</see>'s <see cref="P:Infragistics.Documents.TextDocumentSnapshotScanner.CurrentOffset">CurrentOffset</see> relative to the current token position.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.TokenScanType.CurrentTokenEnd">
            <summary>
            Seek to the end of the current token.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.TokenScanType.CurrentTokenStart">
            <summary>
            Seek to the beginning of the current token.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.TokenScanType.NextTokenEnd">
            <summary>
            Seek to the end of the next token.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.TokenScanType.NextTokenStart">
            <summary>
            Seek to the beginning of the next token.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.TokenScanType.PreviousTokenEnd">
            <summary>
            Seek to the end of the previous token.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.TokenScanType.PreviousTokenStart">
            <summary>
            Seek to the beginning of the previous token.
            </summary>
        </member>
        <member name="T:Infragistics.Documents.WordScanType">
            <summary>
            Determines where to set the <see cref="T:Infragistics.Documents.TextDocumentSnapshotScanner">Scanner</see>'s <see cref="P:Infragistics.Documents.TextDocumentSnapshotScanner.CurrentOffset">CurrentOffset</see> relative to the current word position.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.WordScanType.CurrentWordEnd">
            <summary>
            Seek to the end of the current word.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.WordScanType.CurrentWordStart">
            <summary>
            Seek to the beginning of the current word.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.WordScanType.NextWordEnd">
            <summary>
            Seek to the end of the next word.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.WordScanType.NextWordStart">
            <summary>
            Seek to the beginning of the next word.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.WordScanType.PreviousWordEnd">
            <summary>
            Seek to the end of the previous word.
            </summary>
        </member>
        <member name="F:Infragistics.Documents.WordScanType.PreviousWordStart">
            <summary>
            Seek to the beginning of the previous word.
            </summary>
        </member>
        <member name="T:Infragistics.Documents.GlobalAmbiguityDetectedEventArgs">
            <summary>
            Events arguments for the <see cref="E:Lexing.Regex
            </summary>
            <seealso cref="E:Lexing.Regex
        </member>
        <member name="P:Infragistics.Documents.GlobalAmbiguityDetectedEventArgs.Context">
             <summary>
             An object containing the relevant information about the global ambiguity.
             </summary>
             <remarks>
            <p class="body">
             A global ambiguity occurs when the same span of text in a document can be interpreted in two or more different ways based on the grammar
             rules for the language and the context in which text occurs. The Context value contains two alternate parses for the text (if there are 
             more than two alternate parses, the event will be fired multiple times). An event handler can determine which of the two alternate parse 
             sub-trees should be used in the final tree by setting <see cref="P:Lexing.Regex
             </p>
             </remarks>
        </member>
        <member name="T:Infragistics.Documents.TagsChangedEventArgs">
            <summary>
            Class that defines the arguments passed in the TagsChanged event.
            </summary>
            <seealso cref="E:Infragistics.Documents.Tagging.ITagger`1.TagsChanged"/>
        </member>
        <member name="P:Infragistics.Documents.TagsChangedEventArgs.Span">
            <summary>
            Returns the <see cref="T:Infragistics.Documents.SnapshotSpan"/> within which tags have changed.
            </summary>
        </member>
        <member name="T:Infragistics.Documents.TextDocument">
            <summary>
            Represents a single text or code document (if the <see cref="P:Infragistics.Documents.TextDocument.Language"/>. property is set).
            </summary>
            <seealso cref="T:Infragistics.Documents.TextDocumentSnapshot"/>
            <seealso cref="T:Infragistics.Documents.TextDocumentSnapshotScanner"/>
        </member>
        <member name="M:Infragistics.Documents.TextDocument.OnTextChanged(Infragistics.Documents.TextChangedEventArgs)">
            <summary>
            Invokes the
            <see cref="E:Infragistics.Documents.TextDocument.TextChanged">TextChanged</see>
            event.
            </summary>
            <param name="args">
            An instance of the
            <see cref="T:Infragistics.Documents.TextChangedEventArgs">TextChangedEventArgs</see>
            class.
            </param>
            <seealso cref="E:Infragistics.Documents.TextDocument.TextChanged">TextChanged event (TextDocument class)</seealso>
        </member>
        <member name="M:Infragistics.Documents.TextDocument.OnTextChanging(Infragistics.Documents.TextChangingEventArgs)">
            <summary>
            Invokes the
            <see cref="E:Infragistics.Documents.TextDocument.TextChanging">TextChanging</see>
            event.
            </summary>
            <param name="args">
            An instance of the
            <see cref="T:Infragistics.Documents.TextChangingEventArgs">TextChangingEventArgs</see>
            class.
            </param>
            <seealso cref="E:Infragistics.Documents.TextDocument.TextChanging">TextChanging event (TextDocument class)</seealso>
        </member>
        <member name="M:Infragistics.Documents.TextDocument.OnTextLoaded(System.EventArgs)">
            <summary>
            Occurs after either the <see cref="M:Infragistics.Documents.TextDocument.Load(System.IO.Stream)">Load</see> or <see cref="M:Infragistics.Documents.TextDocument.InitializeText(System.String)"/> method is called.
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> this event will also occurs if there is existing text and the <see cref="P:Infragistics.Documents.TextDocument.Language"/> property is changed.</para>
            </remarks>
            <seealso cref="E:Infragistics.Documents.TextDocument.TextLoaded">TextLoaded event</seealso>
        </member>
        <member name="M:Infragistics.Documents.TextDocument.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Documents.TextDocument"/>
            </summary>
        </member>
        <member name="M:Infragistics.Documents.TextDocument.Append(System.String)">
            <summary>
            Appends text to the end of the document
            </summary>
            <param name="text">The text to insert</param>
            <returns>True if the operation was successful, otherwise false.</returns>
            <exception cref="T:System.InvalidOperationException">If the <see cref="P:Infragistics.Documents.TextDocument.IsReadOnly"/> property is set to true or if this method is called in the middle of an update operation, e.g. from within a TextChanging event handler.</exception>
        </member>
        <member name="M:Infragistics.Documents.TextDocument.ClearUndoRedoHistory(System.Boolean)">
            <summary>
            Removes all the Undo and Redo history that relates to this TextDocument.
            </summary>
            <param name="includeRootTransaction">Indicates whether this method should affect the current open RootTransaction on the <see cref="P:Infragistics.Documents.TextDocument.UndoManager"/> if there is one.</param>
            <remarks>
            <para class="note"><b>Note:</b> this is equivalent to calling the <see cref="P:Infragistics.Documents.TextDocument.UndoManager"/>'s RemoveAll method with a filter that removes only 
            undo units whose Target is this TextDocument. By default that will be all of the history, however, since the <see cref="P:Infragistics.Documents.TextDocument.UndoManager"/> property is settable it is
            possible to share a single instance of an UndoManager with more that one TextDocument so that there histories are mingled.</para>
            </remarks>
        </member>
        <member name="M:Infragistics.Documents.TextDocument.CreateTagAggregator``1">
            <summary>
            Returns a DocumentTagAggregator that can aggregate ITags of type T.
            </summary>
            <typeparam name="T">The type of <see cref="T:Infragistics.Documents.Tagging.ITag"/> to aggregate</typeparam>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Documents.TextDocument.Delete">
            <summary>
            Removes all text from this document.
            </summary>
            <returns>True if the operation was successful, otherwise false.</returns>
            <exception cref="T:System.InvalidOperationException">If the <see cref="P:Infragistics.Documents.TextDocument.IsReadOnly"/> property is set to true.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If startOffset is less than 0 or startOffset plus length greater than 1 minus the current length of the document.</exception>
        </member>
        <member name="M:Infragistics.Documents.TextDocument.Delete(System.Int32)">
            <summary>
            Deletes text from the document, starting at the specified <paramref name="startOffset"/>.
            </summary>
            <param name="startOffset">The zero-based offset from which the deletion begins.</param>
            <returns>True if the operation was successful, otherwise false.</returns>
            <exception cref="T:System.InvalidOperationException">If the <see cref="P:Infragistics.Documents.TextDocument.IsReadOnly"/> property is set to true.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If startOffset is less than 0 or startOffset plus length greater than 1 minus the current length of the document.</exception>
        </member>
        <member name="M:Infragistics.Documents.TextDocument.Delete(Lexing.Regex
            <summary>
            Deletes text from the document 
            </summary>
            <param name="span">The span to delete.</param>
            <returns>True if the operation was successful, otherwise false.</returns>
            <exception cref="T:System.InvalidOperationException">If the <see cref="P:Infragistics.Documents.TextDocument.IsReadOnly"/> property is set to true or if this method is called in the middle of an update operation, e.g. from within a TextChanging event handler.</exception>
        </member>
        <member name="M:Infragistics.Documents.TextDocument.Delete(System.Int32,System.Int32)">
            <summary>
            Deletes text from the document 
            </summary>
            <param name="startOffset">The zero-based offset where the text to delete start.</param>
            <param name="length">The length of the text to delete.</param>
            <returns>True if the operation was successful, otherwise false.</returns>
            <exception cref="T:System.InvalidOperationException">If the <see cref="P:Infragistics.Documents.TextDocument.IsReadOnly"/> property is set to true or if this method is called in the middle of an update operation, e.g. from within a TextChanging event handler.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If startOffset is less than 0 or startOffset plus length greater than 1 minus the current length of the document.</exception>
        </member>
        <member name="M:Infragistics.Documents.TextDocument.FindReplace(System.String,Infragistics.Documents.TextSearchCriteria,System.Int32,System.Boolean)">
            <summary>
            Finds an instance of text in the document that matches the search criteria and replaces it with another string.
            </summary>
            <param name="newText">The new text</param>
            <param name="criteria">The search criteria</param>
            <param name="startOffset">The start offset</param>
            <param name="wrapIfNotFound">if true continue the search by wrapping if the end is reached without a match.</param>
            <returns>A <see cref="T:Infragistics.Documents.TextSearchResultInfo">TextSearchResultInfo</see> object containing the results of the operation.</returns>
            <exception cref="T:System.InvalidOperationException">If the <see cref="P:Infragistics.Documents.TextDocument.IsReadOnly"/> property is set to true or if this method is called in the middle of an update operation, e.g. from within a TextChanging event handler.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If startOffset is less than 0 or startOffset plus length greater than 1 minus the current length of the document.</exception>
        </member>
        <member name="M:Infragistics.Documents.TextDocument.FindReplace(System.String,Infragistics.Documents.TextSearchCriteria,Lexing.Regex
            <summary>
            Finds an instance of text in the document that matches the search criteria and replaces it with another string..
            </summary>
            <param name="newText">The new text</param>
            <param name="criteria">The search criteria</param>
            <param name="spanToSearch">The span of text to limit the search to.</param>
            <param name="startOffset">The start offset relative to the beginning of the document.</param>
            <param name="wrapIfNotFound">if true continue the search by wrapping if the end is reached without a match.</param>
            <returns>A <see cref="T:Infragistics.Documents.TextSearchResultInfo">TextSearchResultInfo</see> object containing the results of the operation.</returns>
            <exception cref="T:System.InvalidOperationException">If the <see cref="P:Infragistics.Documents.TextDocument.IsReadOnly"/> property is set to true or if this method is called in the middle of an update operation, e.g. from within a TextChanging event handler.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If startOffset is less than 0 or startOffset plus length greater than 1 minus the current length of the document.</exception>
        </member>
        <member name="M:Infragistics.Documents.TextDocument.FindReplaceAll(Infragistics.Documents.TextSearchCriteria,System.String,System.Nullable{Lexing.Regex
            <summary>
            Replaces all instances of text in the document that matches the search criteria.
            </summary>
            <param name="criteria">The search criteria</param>
            <param name="replacementText">The new text</param>
            <param name="spanToSearch">An optional span to limit the scope of the find/replace</param>
            <returns>A <see cref="T:Infragistics.Documents.TextSearchResultInfo">TextSearchResultInfo</see> object containing the results of the operation.</returns>
            <exception cref="T:System.InvalidOperationException">If the <see cref="P:Infragistics.Documents.TextDocument.IsReadOnly"/> property is set to true or if this method is called in the middle of an update operation, e.g. from within a TextChanging event handler.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If startOffset is less than 0 or startOffset plus length greater than 1 minus the current length of the document.</exception>
        </member>
        <member name="M:Infragistics.Documents.TextDocument.InitializeText(System.String)">
            <summary>
            Initializes all of the text in the document.
            </summary>
            <param name="text">The text to </param>
            <exception cref="T:System.InvalidOperationException">if this method is called in the middle of an update operation, e.g. from within a TextChanging event handler.</exception>
            <remarks>
            <para class="note"><b>Note:</b> this is equivalent to calling one of the <see cref="M:Infragistics.Documents.TextDocument.Load(System.IO.Stream)">Load</see> methods.</para>
            </remarks>
            <seealso cref="M:Infragistics.Documents.TextDocument.Load(System.IO.Stream)">Load</seealso>
        </member>
        <member name="M:Infragistics.Documents.TextDocument.IndentLines(System.Int32,System.Int32)">
            <summary>
            Indents a block of lines (i.e. inserts leading whitepsace).
            </summary>
            <param name="lineIndex">The zero-based index of the first line to indent.</param>
            <param name="lineCount">The total number of lines to indent.</param>
            <returns>True if the operation was successful, otherwise false.</returns>
            <exception cref="T:System.InvalidOperationException">If the <see cref="P:Infragistics.Documents.TextDocument.IsReadOnly"/> property is set to true or if this method is called in the middle of an update operation, e.g. from within a TextChanging event handler.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If lineIndex is less than 0 or lineIndex plus lineCount greater than 1 minus the number of lines in the document..</exception>
            <remarks>
            <para class="note"><b>Note:</b> the amount and type of whitespace inserted is determined by the <see cref="P:Infragistics.Documents.TextDocument.TabExtent"/> and <see cref="P:Infragistics.Documents.TextDocument.TabEntryBehavior">TabEntryBehavior</see> property settings.</para>
            </remarks>
            <seealso cref="M:Infragistics.Documents.TextDocument.OutdentLines(System.Int32,System.Int32)"/>
            <seealso cref="P:Infragistics.Documents.TextDocument.TabExtent"/>
            <seealso cref="P:Infragistics.Documents.TextDocument.TabEntryBehavior">TabEntryBehavior</seealso>
        </member>
        <member name="M:Infragistics.Documents.TextDocument.Insert(System.Int32,System.String)">
            <summary>
            Inserts text into the document at a specific offset
            </summary>
            <param name="offset">The zero-based offset where to insert the text.</param>
            <param name="text">The text to insert</param>
            <returns>True if the operation was successful, otherwise false.</returns>
            <exception cref="T:System.InvalidOperationException">If the <see cref="P:Infragistics.Documents.TextDocument.IsReadOnly"/> property is set to true or if this method is called in the middle of an update operation, e.g. from within a TextChanging event handler.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If offset is less than 0 or greater than 1 minus the current length of the document.</exception>
        </member>
        <member name="M:Infragistics.Documents.TextDocument.Load(System.String)">
            <summary>
            Initializes the document with text from the specified file.
            </summary>
            <param name="filename">The name of the file to load.</param>
            <returns>True if the operation was successful, otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">if filename is null or empty.</exception>
            <remarks>
            <para class="note"><b>Note:</b> this is equivalent to calling the <see cref="M:Infragistics.Documents.TextDocument.InitializeText(System.String)"/> method.</para>
            </remarks>
            <seealso cref="M:Infragistics.Documents.TextDocument.InitializeText(System.String)"/>
        </member>
        <member name="M:Infragistics.Documents.TextDocument.Load(System.IO.Stream)">
            <summary>
            Initializes the document with text from a stream.
            </summary>
            <param name="stream">The stream that contains the text.</param>
            <returns>True if the operation was successful, otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">if stream is null.</exception>
            <exception cref="T:System.InvalidOperationException">if this method is called in the middle of an update operation, e.g. from within a TextChanging event handler.</exception>
            <remarks>
            <para class="note"><b>Note:</b> this is equivalent to calling the <see cref="M:Infragistics.Documents.TextDocument.InitializeText(System.String)"/> method.</para>
            </remarks>
            <seealso cref="M:Infragistics.Documents.TextDocument.InitializeText(System.String)"/>
        </member>
        <member name="M:Infragistics.Documents.TextDocument.OutdentLines(System.Int32,System.Int32)">
            <summary>
            Outdents a block of lines (i.e. removes leading whitepsace).
            </summary>
            <param name="lineIndex">The zero-based index of the first line to outdent.</param>
            <param name="lineCount">The total number of lines to outdent.</param>
            <returns>True if the operation was successful, otherwise false.</returns>
            <exception cref="T:System.InvalidOperationException">If the <see cref="P:Infragistics.Documents.TextDocument.IsReadOnly"/> property is set to true or if this method is called in the middle of an update operation, e.g. from within a TextChanging event handler.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If lineIndex is less than 0 or lineIndex plus lineCount greater than 1 minus the number of lines in the document.</exception>
            <remarks>
            <para class="note"><b>Note:</b> the amount and type of whitespace removed is determined by the <see cref="P:Infragistics.Documents.TextDocument.TabExtent"/> property setting.</para>
            </remarks>
            <seealso cref="M:Infragistics.Documents.TextDocument.IndentLines(System.Int32,System.Int32)"/>
            <seealso cref="P:Infragistics.Documents.TextDocument.TabExtent"/>
        </member>
        <member name="M:Infragistics.Documents.TextDocument.Parse">
            <summary>
            Parses the document synchronously.
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> just before the method returns the <see cref="E:Infragistics.Documents.TextDocument.PropertyChanged"/> event will be raised and the <see cref="P:Infragistics.Documents.TextDocument.SyntaxTree"/> property will return the new tree.</para>
            </remarks>
            <seealso cref="P:Infragistics.Documents.TextDocument.SyntaxTree"/>		
        </member>
        <member name="M:Infragistics.Documents.TextDocument.ParseAsync">
            <summary>
            Parses the document on a background thread.
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> when the parse operation is complete the <see cref="E:Infragistics.Documents.TextDocument.PropertyChanged"/> event will be raised and the <see cref="P:Infragistics.Documents.TextDocument.SyntaxTree"/> property will return the new tree.</para>
            </remarks>
            <seealso cref="P:Infragistics.Documents.TextDocument.SyntaxTree"/>
        </member>
        <member name="M:Infragistics.Documents.TextDocument.Replace(System.String,Lexing.Regex
            <summary>
            Replaces a range of text in the document with a new string.
            </summary>
            <param name="newText">The new text</param>
            <param name="spanToReplace">The span of the text to replace.</param>
            <returns>True if successful.</returns>
            <exception cref="T:System.InvalidOperationException">If the <see cref="P:Infragistics.Documents.TextDocument.IsReadOnly"/> property is set to true or if this method is called in the middle of an update operation, e.g. from within a TextChanging event handler.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the replacementSpan. is not valid.</exception>
        </member>
        <member name="M:Infragistics.Documents.TextDocument.Replace(System.String,System.Int32,System.Int32)">
            <summary>
            Replaces a range of text in the document with a new string.
            </summary>
            <param name="newText">The new text</param>
            <param name="startOffset">The zero-based offset where the text to replace starts.</param>
            <param name="lengthOfTextToReplace">The length of the text to delete.</param>
            <returns>True if successful.</returns>
            <exception cref="T:System.InvalidOperationException">If the <see cref="P:Infragistics.Documents.TextDocument.IsReadOnly"/> property is set to true or if this method is called in the middle of an update operation, e.g. from within a TextChanging event handler.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If startOffset is less than 0 or greater than 1 minus the current length of the document.</exception>
        </member>
        <member name="M:Infragistics.Documents.TextDocument.Save">
            <summary>
            Saves the document to the file specified via a previous call to the <see cref="M:Infragistics.Documents.TextDocument.Load(System.String)"/> method.
            </summary>
            <returns>True if the operation was successful, otherwise false.</returns>
        </member>
        <member name="M:Infragistics.Documents.TextDocument.Save(Infragistics.Documents.NewLineSequence)">
            <summary>
            Saves the document to the file specified via a previous call to the <see cref="M:Infragistics.Documents.TextDocument.Load(System.String)"/> method.
            </summary>
            <param name="newLineSequence">The sequence of characters to delimit each line in the output.</param>
            <returns>True if the operation was successful, otherwise false.</returns>
        </member>
        <member name="M:Infragistics.Documents.TextDocument.Save(System.String)">
            <summary>
            Saves the document to the specified file.
            </summary>
            <param name="filename">The name of the file to write to.</param>
            <returns>True if the operation was successful, otherwise false.</returns>
        </member>
        <member name="M:Infragistics.Documents.TextDocument.Save(System.String,Infragistics.Documents.NewLineSequence)">
            <summary>
            Saves the document to the specified file.
            </summary>
            <param name="filename">The name of the file to write to.</param>
            <param name="newLineSequence">The sequence of characters to delimit each line in the output.</param>
            <returns>True if the operation was successful, otherwise false.</returns>
        </member>
        <member name="M:Infragistics.Documents.TextDocument.Save(System.IO.Stream)">
            <summary>
            Saves the document to a stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <returns>True if the operation was successful, otherwise false.</returns>
        </member>
        <member name="M:Infragistics.Documents.TextDocument.Save(System.IO.Stream,Infragistics.Documents.NewLineSequence)">
            <summary>
            Saves the document to a stream.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="newLineSequence">The sequence of characters to delimit each line in the output.</param>
            <returns>True if the operation was successful, otherwise false.</returns>
        </member>
        <member name="M:Infragistics.Documents.TextDocument.RegisterResources(System.String,System.Reflection.Assembly)">
            <summary>
            Adds an additonal Resx file in which the control will pull its resources from.
            </summary>
            <param name="name">The name of the embedded resx file that contains the resources to be used.</param>
            <param name="assembly">The assembly in which the resx file is embedded.</param>
            <remarks>Don't include the extension of the file, but prefix it with the default Namespace of the assembly.</remarks>
        </member>
        <member name="M:Infragistics.Documents.TextDocument.UnregisterResources(System.String)">
            <summary>
            Removes a previously registered resx file.
            </summary>
            <param name="name">The name of the embedded resx file that was used for registration.</param>
            <remarks>
            Note: this won't have any effect on controls that are already in view and are already displaying strings.
            It will only affect any new controls created.
            </remarks>
        </member>
        <member name="E:Infragistics.Documents.TextDocument.TextChanged">
            <summary>
            Occurs after changes have been made to the document's text.
            </summary>
            <seealso cref="T:Infragistics.Documents.TextChangedEventArgs">TextChangedEventArgs class</seealso>
        </member>
        <member name="E:Infragistics.Documents.TextDocument.TextChanging">
            <summary>
            Occurs before changes are made to the document's text.
            </summary>
            <seealso cref="T:Infragistics.Documents.TextChangingEventArgs">TextChangingEventArgs class</seealso>
        </member>
        <member name="E:Infragistics.Documents.TextDocument.TextLoaded">
            <summary>
            Occurs after either the <see cref="M:Infragistics.Documents.TextDocument.Load(System.IO.Stream)">Load</see> or the <see cref="M:Infragistics.Documents.TextDocument.InitializeText(System.String)"/> method is called.
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> this event will also occurs if there is existing text and the <see cref="P:Infragistics.Documents.TextDocument.Language"/> property is changed.</para>
            </remarks>
        </member>
        <member name="P:Infragistics.Documents.TextDocument.CurrentSnapshot">
            <summary>
            Returns a <see cref="T:Infragistics.Documents.TextDocumentSnapshot">snapshot</see> representing the current version of the document (read-only).
            </summary>
            <value>A thread-safe immutable snapshot of the current version of the document</value>
            <remarks>
            <para class="note"><b>Note:</b> Every time a change is made to the document a new snapshot is created. Each snapshot is thread-safe and immutable.</para>
            </remarks>
        </member>
        <member name="P:Infragistics.Documents.TextDocument.FileName">
            <summary>
            Returns the name of the file passed into the <see cref="M:Infragistics.Documents.TextDocument.Load(System.String)"/> method (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Documents.TextDocument.Language">
            <summary>
            Returns/sets the associated language
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> if this property is not set then the document will be treated as plain text with no syntax rules. In this case an instance of the <see cref="T:Lexing.Regex
            </remarks>
        </member>
        <member name="P:Infragistics.Documents.TextDocument.IsReadOnly">
            <summary>
            Returns/sets whether or not the text in the document can be changed.
            </summary>
            <value>False if the text can be edited, otherwise true.</value>
        </member>
        <member name="P:Infragistics.Documents.TextDocument.NewLineSequence">
            <summary>
            Returns/sets the sequence of characters used to delimit lines in the document.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.TextDocument.SyntaxTree">
            <summary>
            Returns the syntax parse tree (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Documents.TextDocument.TabExtent">
            <summary>
            Returns/sets the number of spaces a tab character represents.
            </summary>
            <seealso cref="P:Infragistics.Documents.TextDocument.TabEntryBehavior">TabEntryBehavior</seealso>
        </member>
        <member name="P:Infragistics.Documents.TextDocument.TabEntryBehavior">
            <summary>
            Returns/sets what gets inserted into a document when a tab key is entered..
            </summary>
            <value>The default value is 'KeepTabs'.</value>
            <seealso cref="P:Infragistics.Documents.TextDocument.TabExtent"/>
        </member>
        <member name="P:Infragistics.Documents.TextDocument.UndoManager">
            <summary>
            Returns/sets the object that manages the undo/redo stacks
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> by default each instance of a TextDocument will instanitate its own <see cref="T:Infragistics.Undo.UndoManager"/>. However, since this property is settable it is possible to have some or all TextDocuments share a single UndoManager.</para>
            </remarks>
        </member>
        <member name="E:Infragistics.Documents.TextDocument.PropertyChanged">
            <summary>
            Ocuurs after a property value has changed
            </summary>
        </member>
        <member name="T:Infragistics.Documents.TextChangingEventArgs">
            <summary>
            Provides information about a change to text in a
            <see cref="T:Infragistics.Documents.TextDocument">TextDocument</see>
            </summary>
            <seealso cref="E:Infragistics.Documents.TextDocument.TextChanging">TextChanging Event</seealso>
        </member>
        <member name="P:Infragistics.Documents.TextChangingEventArgs.After">
            <summary>
            Returns the new 
            <see cref="T:Infragistics.Documents.TextDocumentSnapshot">snapshot</see> 
            which reflects the
            <see cref="T:Infragistics.Documents.TextChange">changes</see>
            which triggered this event are applied.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.TextChangingEventArgs.Before">
            <summary>
            Returns the current 
            <see cref="T:Infragistics.Documents.TextDocumentSnapshot">snapshot</see> 
            which reflects the state of the document before the  <see cref="T:Infragistics.Documents.TextChange">changes</see> which triggered this event are applied.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.TextChangingEventArgs.CanCancel">
            <summary>
            Determines if this action can be canceled (read-only).
            </summary>
            <value>true to allow cancellation of the action, otherwise false.</value>
            <remarks>
            <para class="note"><b>Note:</b> if the <see cref="P:Infragistics.Documents.TextChangingEventArgs.Source"/> property returns 'Undo' or 'Redo' CanCancel will return false."/&gt;</para>
            </remarks>
        </member>
        <member name="P:Infragistics.Documents.TextChangingEventArgs.Changes">
            <summary>
            Returns a read-only list containing all 
            <see cref="T:Infragistics.Documents.TextChange">changes</see>
            that triggered this event.
            </summary>
            <seealso cref="T:Infragistics.Documents.TextChange"/>
        </member>
        <member name="P:Infragistics.Documents.TextChangingEventArgs.Source">
            <summary>
            Identifies the source of the change (read-only).
            </summary>
        </member>
        <member name="T:Infragistics.Documents.TextChangedEventArgs">
            <summary>
            Provides information about a change to text in a
            <see cref="T:Infragistics.Documents.TextDocument">TextDocument</see>
            </summary>
            <seealso cref="E:Infragistics.Documents.TextDocument.TextChanged">TextChanged Event</seealso>
        </member>
        <member name="P:Infragistics.Documents.TextChangedEventArgs.After">
            <summary>
            Returns the current
            <see cref="T:Infragistics.Documents.TextDocumentSnapshot">snapshot</see>,
            which reflects the
            <see cref="T:Infragistics.Documents.TextChange">changes</see>
            which triggered this event.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.TextChangedEventArgs.Before">
            <summary>
            Returns the old 
            <see cref="T:Infragistics.Documents.TextDocumentSnapshot">snapshot</see>,
            which reflects the state of the document before the 
            <see cref="T:Infragistics.Documents.TextChange">changes</see>
            which triggered this event.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.TextChangedEventArgs.Changes">
            <summary>
            Returns a read-only list containing all 
            <see cref="T:Infragistics.Documents.TextChange">changes</see>
            that triggered this event.
            </summary>
            <seealso cref="T:Infragistics.Documents.TextChange"/>
        </member>
        <member name="P:Infragistics.Documents.TextChangedEventArgs.Source">
            <summary>
            Identifies the source of the change (read-only).
            </summary>
        </member>
        <member name="T:Lexing.Regex
            <summary>
            Provides contextual information for the <see cref="E:Lexing.Regex
            </summary>
            <seealso cref="E:Lexing.Regex
            <seealso cref="E:Lexing.Regex
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets the service which was registered or unregistered.
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets The case-sensitively unique key with which the service was registered or null if the service was registered 
            with a Type.
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Gets the type with which the service was registered or null if the service was registered with a key.
            </summary>
        </member>
        <member name="T:Infragistics.Documents.IIndentServiceProvider">
            <summary>
            The interface used by an object that provides the indenting service for lines in a document.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.IIndentServiceProvider.CalculateLineIndent(Infragistics.Documents.TextDocument,System.Int32)">
            <summary>
            Returns the number of columns to indent a line.
            </summary>
            <param name="document">The document being edited.</param>
            <param name="lineIndex">The zero-based line index of the line being indented</param>
            <returns>The number of columns to indent the line (i.e. the amount of whitespace before the first non-tab or space character).</returns>
            <remarks>
            <para class="note"><b>Note:</b> use the <see cref="M:Infragistics.Documents.TextDocumentSnapshot.LineFromIndex(System.Int32)">LineFromIndex</see> and/or <see cref="M:Infragistics.Documents.TextDocumentSnapshot.GetLines(System.Int32,System.Boolean)">GetLines</see> methods off the document's <see cref="P:Infragistics.Documents.TextDocument.CurrentSnapshot">CurrentSnapshot</see> to analyze the line. Also, the document's <see cref="P:Infragistics.Documents.TextDocument.TabExtent">TabExtent</see> provides the number of characters that determine tab locations within a line.</para>
            </remarks>
            <seealso cref="M:Infragistics.Documents.TextDocumentSnapshot.LineFromIndex(System.Int32)">LineFromIndex</seealso>
            <seealso cref="M:Infragistics.Documents.SnapshotLineInfo.GetIndent">SnapshotLineInfo.CalculateIndent"</seealso>
        </member>
        <member name="T:Infragistics.Documents.SnapshotLineInfo">
            <summary>
            An object that represents a line within a specific <see cref="T:Infragistics.Documents.TextDocumentSnapshot"/>
            </summary>
        </member>
        <member name="M:Infragistics.Documents.SnapshotLineInfo.Equals(System.Object)">
            <summary>
            Compares the specified object to this object to see if they are equivalent.
            </summary>
            <param name="obj">The object to compare</param>
            <returns>True if the objects are equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotLineInfo.GetHashCode">
            <summary>
            Returns the hash code of the object.
            </summary>
            <returns>A hash code for this instance</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotLineInfo.op_Equality(Infragistics.Documents.SnapshotLineInfo,Infragistics.Documents.SnapshotLineInfo)">
            <summary>
            Compares the values of two <see cref="T:Infragistics.Documents.SnapshotLineInfo"/> structures for equality
            </summary>
            <param name="line1">The first structure</param>
            <param name="line2">The other structure</param>
            <returns>true if the two instances are equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotLineInfo.op_Inequality(Infragistics.Documents.SnapshotLineInfo,Infragistics.Documents.SnapshotLineInfo)">
            <summary>
            Compares the values of two <see cref="T:Infragistics.Documents.SnapshotLineInfo"/> structures for inequality
            </summary>
            <param name="line1">The first structure</param>
            <param name="line2">The other structure</param>
            <returns>true if the two instances are not equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotLineInfo.ToString">
            <summary>
            Returns a string representation of the object.
            </summary>
            <returns>A string that represents this <see cref="T:Infragistics.Documents.SnapshotLineInfo"/></returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotLineInfo.Contains(Lexing.Regex
            <summary>
            Returns true if the <see cref="T:Lexing.Regex
            </summary>
            <param name="token">The token to test.</param>
            <returns>true if the line contains the token, otherwise false.</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotLineInfo.GetCharacter(System.Int32)">
            <summary>
            Returns the character at a specific offset in the line.
            </summary>
            <param name="charOffset">The zero-based offset of the character from the beginning of the line.</param>
            <returns>The character in question.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If charOffset is less than 0 or greater than or equal to <see cref="P:Infragistics.Documents.SnapshotLineInfo.Length"/>.</exception>
        </member>
        <member name="M:Infragistics.Documents.SnapshotLineInfo.GetIndent">
            <summary>
            Returns the line indent.
            </summary>
            <returns>The number of columns that the line is indented by (i.e. the amount of whitespace before the first non-tab or space character).</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotLineInfo.GetText(System.Boolean)">
            <summary>
            Returns the concatenated text from all the <see cref="T:Lexing.Regex
            </summary>
            <param name="includeLineFeed">If true the returned string will include any carriage return/line feed characters at the end of the line.</param>
            <returns>A string representing the complete text of the line.</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotLineInfo.GetTokenAtIndex(System.Int32)">
            <summary>
            Returns the <see cref="T:Lexing.Regex
            </summary>
            <param name="tokenIndex">The zero-based index of the token.</param>
            <returns>The token in question.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If tokenIndex is less than 0 or greater than or equal to <see cref="P:Infragistics.Documents.SnapshotLineInfo.TokenCount"/>.</exception>
        </member>
        <member name="M:Infragistics.Documents.SnapshotLineInfo.GetTokenAtOffset(System.Int32,System.Boolean)">
            <summary>
            Returns the <see cref="T:Lexing.Regex
            </summary>
            <param name="charOffset">The zero-based offset of the character from the beginning of the line.</param>
            <param name="includeZeroLengthTokens">If true will return the first at the offset even if it has no length.</param>
            <returns>The token in question.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If charOffset is less than 0 or greater than or equal to <see cref="P:Infragistics.Documents.SnapshotLineInfo.Length"/>.</exception>
        </member>
        <member name="M:Infragistics.Documents.SnapshotLineInfo.IndexOf(Lexing.Regex
            <summary>
            Returns the zero-based index of a <see cref="T:Lexing.Regex
            </summary>
            <param name="token">The token to test.</param>
            <returns>The zero-based index or -1 if the token is not in the line.</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotLineInfo.IsSameAs(Infragistics.Documents.SnapshotLineInfo)">
            <summary>
            Returns true if the specified <see cref="T:Infragistics.Documents.SnapshotLineInfo"/> represents the same line content.
            </summary>
            <param name="snapshotLineInfo">The <see cref="T:Infragistics.Documents.SnapshotLineInfo"/> to check.</param>
            <returns>True if the specified <see cref="T:Infragistics.Documents.SnapshotLineInfo"/> represents the same line content, otherwise false.</returns>
            <remarks>
            <para class="note"><b>Note:</b> this method will return true if the line content is the same even though the <see cref="P:Infragistics.Documents.SnapshotLineInfo.Snapshot"/> may be different.</para>
            </remarks>
        </member>
        <member name="P:Infragistics.Documents.SnapshotLineInfo.Length">
            <summary>
            Returns the length of all the text in the line including carriage return and line feed characters. (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Documents.SnapshotLineInfo.LineIndex">
            <summary>
            Returns the zero-based index of the line (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Documents.SnapshotLineInfo.LineNumber">
            <summary>
            Returns the 1-based line number (read-only).
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> this is one more than the <see cref="P:Infragistics.Documents.SnapshotLineInfo.LineIndex"/> value.</para>
            </remarks>
        </member>
        <member name="P:Infragistics.Documents.SnapshotLineInfo.OverallOffset">
            <summary>
            Returns the zero-based offset of this line from the beginning of the document (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Documents.SnapshotLineInfo.Snapshot">
            <summary>
            Returns the associated <see cref="T:Infragistics.Documents.TextDocumentSnapshot"/> (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Documents.SnapshotLineInfo.TextLength">
            <summary>
            Returns the length of all the text in the line excluding carriage return and line feed characters. (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Documents.SnapshotLineInfo.TokenCount">
            <summary>
            Returns the total number of <see cref="T:Lexing.Regex
            </summary>
        </member>
        <member name="T:Infragistics.Documents.SnapshotPoint">
            <summary>
            Represents a point (i.e. offset) within a specific <see cref="T:Infragistics.Documents.TextDocumentSnapshot"/>
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> to translate a point between 2 related <see cref="T:Infragistics.Documents.TextDocumentSnapshot">Snapshot</see>s use the <see cref="M:Infragistics.Documents.SnapshotPoint.TranslateTo(Infragistics.Documents.TextDocumentSnapshot,Infragistics.Documents.PointTrackingMode)"/> method.</para>
            </remarks>
        </member>
        <member name="M:Infragistics.Documents.SnapshotPoint.#ctor(Infragistics.Documents.TextDocumentSnapshot,System.Int32)">
            <summary>
            Instantiates a new <see cref="T:Infragistics.Documents.SnapshotPoint"/>
            </summary>
            <param name="snapshot">The associated TextDocumentSnapshot</param>
            <param name="position">The position within the snapshot</param>
        </member>
        <member name="M:Infragistics.Documents.SnapshotPoint.GetHashCode">
            <summary>
            Returns the hash code of the structure.
            </summary>
            <returns>A hash code for this instance</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotPoint.Equals(System.Object)">
            <summary>
            Compares the specified object to this object to see if they are equivalent.
            </summary>
            <param name="obj">The object to compare</param>
            <returns>True if the objects are equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotPoint.op_Implicit(Infragistics.Documents.SnapshotPoint)~System.Int32">
            <summary>
            Implicitly converts the SnapshotPoint to an int representing its position.
            </summary>
            <param name="point">The point</param>
            <returns>The point's position</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotPoint.op_Addition(Infragistics.Documents.SnapshotPoint,System.Int32)">
            <summary>
            Adds an offset to a position.
            </summary>
            <param name="point">The starting point</param>
            <param name="offset">The amount to increment</param>
            <returns>A new SnapshotPoint with the resulting position</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotPoint.op_Subtraction(Infragistics.Documents.SnapshotPoint,System.Int32)">
            <summary>
            Subtracts an offset from a position.
            </summary>
            <param name="point">The starting point</param>
            <param name="offset">The amount to decrement</param>
            <returns>A new SnapshotPoint with the resulting position</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotPoint.op_Subtraction(Infragistics.Documents.SnapshotPoint,Infragistics.Documents.SnapshotPoint)">
            <summary>
            Comuotes the difference (delta) between two <see cref="T:Infragistics.Documents.SnapshotPoint"/> structures.
            </summary>
            <param name="point">The first structure</param>
            <param name="other">The other structure</param>
            <returns>The difference between the 2 points.</returns>
            <exception cref="T:System.ArgumentException">If the snapshots don't match.</exception>
        </member>
        <member name="M:Infragistics.Documents.SnapshotPoint.op_GreaterThan(Infragistics.Documents.SnapshotPoint,Infragistics.Documents.SnapshotPoint)">
            <summary>
            Compares the relative values of two <see cref="T:Infragistics.Documents.SnapshotPoint"/> structures 
            </summary>
            <param name="point">The first structure</param>
            <param name="other">The other structure</param>
            <returns>true if the point is greater than other</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotPoint.op_LessThan(Infragistics.Documents.SnapshotPoint,Infragistics.Documents.SnapshotPoint)">
            <summary>
            Compares the relative values of two <see cref="T:Infragistics.Documents.SnapshotPoint"/> structures 
            </summary>
            <param name="point">The first structure</param>
            <param name="other">The other structure</param>
            <returns>true if the point is less than other</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotPoint.op_Equality(Infragistics.Documents.SnapshotPoint,Infragistics.Documents.SnapshotPoint)">
            <summary>
            Compares the values of two <see cref="T:Infragistics.Documents.SnapshotPoint"/> structures for equality
            </summary>
            <param name="point1">The first structure</param>
            <param name="point2">The other structure</param>
            <returns>true if the two instances are equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotPoint.op_Inequality(Infragistics.Documents.SnapshotPoint,Infragistics.Documents.SnapshotPoint)">
            <summary>
            Compares the values of two <see cref="T:Infragistics.Documents.SnapshotPoint"/> structures for inequality
            </summary>
            <param name="point1">The first structure</param>
            <param name="point2">The other structure</param>
            <returns>true if the two instances are not equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotPoint.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotPoint.Add(System.Int32)">
            <summary>
            Returns a new SnapshotPoint with its position incremented by an offset.
            </summary>
            <param name="offset">The amount to add to the position</param>
            <returns>A new SnapshotPoint with its position incremented by the offset.</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotPoint.Difference(Infragistics.Documents.SnapshotPoint)">
            <summary>
            Returns the position difference between this point and another.
            </summary>
            <param name="other">The other point</param>
            <returns>the difference between the 2 points.</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotPoint.FromTextLocation(Lexing.Regex
            <summary>
            Returns a <see cref="T:Infragistics.Documents.SnapshotPoint"/> that represents the specified <see cref="T:Lexing.Regex
            </summary>
            <param name="textLocation">The <see cref="T:Lexing.Regex
            <param name="associatedSnapshot">The <see cref="T:Infragistics.Documents.TextDocumentSnapshot"/> associated with the specified textLocation</param>
            <returns>A <see cref="T:Infragistics.Documents.SnapshotPoint"/> that represents the specified <see cref="T:Lexing.Regex
        </member>
        <member name="M:Infragistics.Documents.SnapshotPoint.GetChar">
            <summary>
            Returns the character at this position
            </summary>
            <returns>The char</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotPoint.GetContainingLine">
            <summary>
            Returns the line containing this point
            </summary>
            <returns>The line containing the point.</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotPoint.GetTextLocation">
            <summary>
            Returns a <see cref="T:Lexing.Regex
            </summary>
            <returns>A <see cref="T:Lexing.Regex
        </member>
        <member name="M:Infragistics.Documents.SnapshotPoint.Subtract(System.Int32)">
            <summary>
            Returns a new SnapshotPoint with its position decremented by an offset.
            </summary>
            <param name="offset">The amount to subtract from the position</param>
            <returns>A new SnapshotPoint with its position decremented by the offset.</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotPoint.TranslateTo(Infragistics.Documents.TextDocumentSnapshot,Infragistics.Documents.PointTrackingMode)">
            <summary>
            Translates the point from one snapshot to another.
            </summary>
            <param name="target">The target snapshot.</param>
            <param name="mode">The tracking mode to use.</param>
            <returns>A new <see cref="T:Infragistics.Documents.SnapshotPoint"/> with the adjusted position for the target snapshot.</returns>
            <exception cref="T:System.ArgumentNullException">If the target snapshot is null and the current snapshot is not null.</exception>
            <exception cref="T:System.ArgumentException">If the target snapshot is not either a predecessor or successor of this snapshot (i.e. they weren't created from the same root document).</exception>
            <seealso cref="M:Infragistics.Documents.TextDocumentSnapshot.IsCompatibleWith(Infragistics.Documents.TextDocumentSnapshot)">TextDocumentSnapshot.IsCompatibleWith</seealso>
        </member>
        <member name="P:Infragistics.Documents.SnapshotPoint.Position">
            <summary>
            Returns the normalized zero-based end offset from the beginning of the <see cref="T:Infragistics.Documents.TextDocumentSnapshot"/> (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Documents.SnapshotPoint.Snapshot">
            <summary>
            Returns the associated <see cref="T:Infragistics.Documents.TextDocumentSnapshot"/> (read-only).
            </summary>
        </member>
        <member name="T:Infragistics.Documents.SnapshotSpan">
            <summary>
            Represents the span of text within a specific <see cref="T:Infragistics.Documents.TextDocumentSnapshot"/> based on an offset and length
            </summary>
        </member>
        <member name="M:Infragistics.Documents.SnapshotSpan.#ctor(Infragistics.Documents.TextDocumentSnapshot,System.Int32,System.Int32)">
            <summary>
            Instantiates a new <see cref="T:Infragistics.Documents.SnapshotSpan"/>
            </summary>
            <param name="snapshot">The associated TextDocumentSnapshot</param>
            <param name="offset">The zero-based offset into the document</param>
            <param name="length">The number of characters in the span (can be zero or negative)</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If offset is less than 0 or the offset + length is less than 0.</exception>
        </member>
        <member name="M:Infragistics.Documents.SnapshotSpan.#ctor(Infragistics.Documents.TextDocumentSnapshot,Lexing.Regex
            <summary>
            Instantiates a new <see cref="T:Infragistics.Documents.SnapshotSpan"/>
            </summary>
            <param name="snapshot">The associated TextDocumentSnapshot</param>
            <param name="span">The span in the snapshot</param>
        </member>
        <member name="M:Infragistics.Documents.SnapshotSpan.GetHashCode">
            <summary>
            Returns the hash code of the structure.
            </summary>
            <returns>A hash code for this instance</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotSpan.Equals(System.Object)">
            <summary>
            Compares the specified object to this object to see if they are equivalent.
            </summary>
            <param name="obj">The object to compare</param>
            <returns>True if the objects are equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotSpan.op_Implicit(Infragistics.Documents.SnapshotSpan)~Lexing.Regex
            <summary>
            Implicitly converts the SnapshotSpan to a TextSpan.
            </summary>
            <param name="span">The SnapshotSpan</param>
            <returns>The TextSpan</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotSpan.op_Equality(Infragistics.Documents.SnapshotSpan,Infragistics.Documents.SnapshotSpan)">
            <summary>
            Compares the values of two <see cref="T:Infragistics.Documents.SnapshotSpan"/> structures for equality
            </summary>
            <param name="span1">The first structure</param>
            <param name="span2">The other structure</param>
            <returns>true if the two instances are equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotSpan.op_Inequality(Infragistics.Documents.SnapshotSpan,Infragistics.Documents.SnapshotSpan)">
            <summary>
            Compares the values of two <see cref="T:Infragistics.Documents.SnapshotSpan"/> structures for inequality
            </summary>
            <param name="span1">The first structure</param>
            <param name="span2">The other structure</param>
            <returns>true if the two instances are not equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotSpan.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotSpan.GetText">
            <summary>
            Returns the associated text.
            </summary>
            <returns>The associated text.</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotSpan.Intersection(Infragistics.Documents.SnapshotSpan)">
            <summary>
            Returns a span that contains just the intersection between this span and another.
            </summary>
            <param name="span">The span to intersect.</param>
            <returns>A new SnapshotSpan with the intersect or null if the spans don't intersect</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotSpan.Intersection(Lexing.Regex
            <summary>
            Returns a span that contains just the intersection between this span and another.
            </summary>
            <param name="span">The span to intersect.</param>
            <returns>A new SnapshotSpan with the intersect or null if the spans don't intersect</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotSpan.IntersectsWith(Infragistics.Documents.SnapshotSpan)">
            <summary>
            Returns true is the span intersects with this span.
            </summary>
            <param name="span">The span to test.</param>
            <returns>true if the spans intersect, otherwise false</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotSpan.IntersectsWith(Lexing.Regex
            <summary>
            Returns true is the span intersects with this span.
            </summary>
            <param name="span">The span to test.</param>
            <returns>true if the spans intersect, otherwise false</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotSpan.Overlap(Infragistics.Documents.SnapshotSpan)">
            <summary>
            Returns a span that contains just the overlap between this span and another.
            </summary>
            <param name="span">The span to overlap.</param>
            <returns>A new SnapshotSpan with the overlap or null if the spans don't overlap</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotSpan.Overlap(Lexing.Regex
            <summary>
            Returns a span that contains just the overlap between this span and another.
            </summary>
            <param name="span">The span to overlap.</param>
            <returns>A new SnapshotSpan with the overlap or null if the spans don't overlap</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotSpan.OverlapsWith(Infragistics.Documents.SnapshotSpan)">
            <summary>
            Returns true is the span overlaps with this span.
            </summary>
            <param name="span">The span to test.</param>
            <returns>true if the spans overlap, otherwise false</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotSpan.OverlapsWith(Lexing.Regex
            <summary>
            Returns true is the span overlaps with this span.
            </summary>
            <param name="span">The span to test.</param>
            <returns>true if the spans overlap, otherwise false</returns>
        </member>
        <member name="M:Infragistics.Documents.SnapshotSpan.TranslateTo(Infragistics.Documents.TextDocumentSnapshot,Infragistics.Documents.SpanTrackingMode)">
            <summary>
            Translates the span from one snapshot to another
            </summary>
            <param name="target">The target snapshot</param>
            <param name="mode">The tracking mode to use.</param>
            <returns>A new <see cref="T:Infragistics.Documents.SnapshotSpan"/> with the adjusted values for the target snapshot.</returns>
            <exception cref="T:System.ArgumentNullException">If the target snapshot is null.</exception>
            <exception cref="T:System.ArgumentException">If the target snapshot is not either a predecessor or successor of this snapshot (i.e. they weren't created from the same root document).</exception>
            <seealso cref="M:Infragistics.Documents.TextDocumentSnapshot.IsCompatibleWith(Infragistics.Documents.TextDocumentSnapshot)">TextDocumentSnapshot.IsCompatibleWith</seealso>
        </member>
        <member name="P:Infragistics.Documents.SnapshotSpan.End">
            <summary>
            Returns the end point from the beginning of the <see cref="T:Infragistics.Documents.TextDocumentSnapshot"/> (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Documents.SnapshotSpan.EndLocation">
            <summary>
            Returns the end point within the <see cref="T:Infragistics.Documents.TextDocumentSnapshot"/> (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Documents.SnapshotSpan.IsEmpty">
            <summary>
            Returns true if the length of the span is 0 (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Documents.SnapshotSpan.Length">
            <summary>
            Returns the length of the text span (read-only).
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> if the length is negative that means the <see cref="P:Infragistics.Documents.SnapshotSpan.Start"/> of the span is before the <see cref="P:Infragistics.Documents.SnapshotSpan.Offset"/></para>
            </remarks>
        </member>
        <member name="P:Infragistics.Documents.SnapshotSpan.Offset">
            <summary>
            Returns the zero-based offset from the beginning of the <see cref="T:Infragistics.Documents.TextDocumentSnapshot"/> (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Documents.SnapshotSpan.Start">
            <summary>
            Returns the start point within the <see cref="T:Infragistics.Documents.TextDocumentSnapshot"/> (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Documents.SnapshotSpan.StartLocation">
            <summary>
            Returns the normalized start location within the <see cref="T:Infragistics.Documents.TextDocumentSnapshot"/> (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Documents.SnapshotSpan.Snapshot">
            <summary>
            Returns the associated <see cref="T:Infragistics.Documents.TextDocumentSnapshot"/> (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Documents.SnapshotSpan.TextSpan">
            <summary>
            Returns the <see cref="P:Infragistics.Documents.SnapshotSpan.TextSpan"/> structure (read-only).
            </summary>
        </member>
        <member name="T:Infragistics.Documents.Word">
            <summary>
            Represents the word of text within a specific <see cref="T:Infragistics.Documents.TextDocumentSnapshot"/>.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Word.GetHashCode">
            <summary>
            Returns the hash code of the structure.
            </summary>
            <returns>A hash code for this instance</returns>
        </member>
        <member name="M:Infragistics.Documents.Word.Equals(System.Object)">
            <summary>
            Compares the specified object to this object to see if they are equivalent.
            </summary>
            <param name="obj">The object to compare</param>
            <returns>True if the objects are equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.Documents.Word.op_Equality(Infragistics.Documents.Word,Infragistics.Documents.Word)">
            <summary>
            Compares the values of two <see cref="T:Infragistics.Documents.Word"/> structures for equality
            </summary>
            <param name="word1">The first structure</param>
            <param name="word2">The other structure</param>
            <returns>true if the two instances are equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.Documents.Word.op_Inequality(Infragistics.Documents.Word,Infragistics.Documents.Word)">
            <summary>
            Compares the values of two <see cref="T:Infragistics.Documents.Word"/> structures for inequality
            </summary>
            <param name="word1">The first structure</param>
            <param name="word2">The other structure</param>
            <returns>true if the two instances are not equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.Documents.Word.ToString">
            <summary>
            Returns a string representation of the object.
            </summary>
            <returns>The text of the <see cref="T:Infragistics.Documents.Word"/></returns>
        </member>
        <member name="P:Infragistics.Documents.Word.Span">
            <summary>
            Returns the <see cref="T:Infragistics.Documents.SnapshotSpan">span</see> of the text (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Word.Text">
            <summary>
            Returns the text of the word (read-only).
            </summary>
        </member>
        <member name="T:Lexing.Regex
            <summary>
            Represents the parsed syntax tree for a specific <see cref="T:Infragistics.Documents.TextDocumentSnapshot"/>.
            </summary>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Returns the string representation of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Gets a modified tree with an annotation attached to the specified node.
            </summary>
            <remarks>
            <p class="body">
            If a parse tree has errors or annotations attached to a node within it, the resulting syntax tree is an equivalent syntax tree. It represents the same
            structure, but has additional information associated. An annotation can be attached to any node in the current tree or any tree which is equivalent to the
            current tree. For example, if two nodes need to be annotated, the calls can be chained:
            <code>
            var newTree = originalTree.WithAnnotation(node1, annotation1).WithAnnotation(node2, annotation2);
            </code>
            The two nodes were obtained from the original tree, but node2 is annotated on the modified tree which is returned from the first call to WithAnnotation. In
            this case, the logically equivalant node in the modified tree is annotated with annotation2 and a newly modified tree is returned and stored in newTree.
            </p>
            <p class="body">
            Trees can be tested for equivalence by seeing if their <see cref="P:Lexing.Regex
            </p>
            </remarks>
            <param name="node">The node to which the annotation should be attached.</param>
            <param name="annotation">The annotation to add to the node.</param>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="node"/> is null.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="annotation"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Occurs when the <see cref="T:Infragistics.Documents.TextDocumentSnapshot"/> of <paramref name="node"/> does not match the <see cref="P:Lexing.Regex
            </exception>
            <returns>The new <see cref="T:Lexing.Regex
        </member>
        <member name="M:Lexing.Regex
            <summary>
            Gets a modified tree with an error attached to the specified node.
            </summary>
            <remarks>
            <p class="body">
            If a parse tree has errors or annotations attached to a node within it, the resulting syntax tree is an equivalent syntax tree. It represents the same
            structure, but has additional information associated. An error can be attached to any node in the current tree or any tree which is equivalent to the
            current tree. For example, if two nodes need to have errors associated, the calls can be chained:
            <code>
            var newTree = originalTree.WithError(node1, error1).WithError(node2, error2);
            </code>
            The two nodes were obtained from the original tree, but node2 is annotated on the modified tree which is returned from the first call to WithError. In
            this case, the logically equivalant node in the modified tree is associated with error2 and a newly modified tree is returned and stored in newTree.
            </p>
            <p class="body">
            Trees can be tested for equivalence by seeing if their <see cref="P:Lexing.Regex
            </p>
            </remarks>
            <param name="errorNode">The node to which the error should be attached.</param>
            <param name="errorInfo">The information describing the error which should be attached.</param>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="errorNode"/> is null.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Occurs when <paramref name="errorInfo"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Occurs when the <see cref="T:Infragistics.Documents.TextDocumentSnapshot"/> of <paramref name="errorNode"/> does not match the <see cref="P:Lexing.Regex
            </exception>
            <returns>The new <see cref="T:Lexing.Regex
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Returns the root node of the tree (read-only).
            </summary>
        </member>
        <member name="P:Lexing.Regex
            <summary>
            Returns the <see cref="T:Infragistics.Documents.TextDocumentSnapshot"/> that was parsed (read-only).
            </summary>
        </member>
        <member name="T:Infragistics.Documents.Tagging.ClassificationTag">
            <summary>
            Basic implementation of <see cref="T:Infragistics.Documents.Tagging.IClassificationTag"/>.
            </summary>
            <seealso cref="P:Infragistics.Documents.Tagging.ClassificationTag.ClassificationType"/>
            <seealso cref="T:Infragistics.Documents.Tagging.ITag"/>
            <seealso cref="T:Infragistics.Documents.Tagging.ClassificationTagger"/>
            <seealso cref="T:Infragistics.Documents.Tagging.ClassificationTaggerProvider"/>
        </member>
        <member name="T:Infragistics.Documents.Tagging.IClassificationTag">
            <summary>
            The interface definition for all objects that represent a classification tag.
            </summary>
        </member>
        <member name="T:Infragistics.Documents.Tagging.ITag">
            <summary>
            The base interface for all tag types.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Tagging.IClassificationTag.ClassificationType">
            <summary>
            The <see cref="P:Infragistics.Documents.Tagging.IClassificationTag.ClassificationType"/> associated with this tag.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Tagging.ClassificationTag.#ctor(Infragistics.Documents.ClassificationType)">
            <summary>
            Constructor
            </summary>
            <param name="classificationType">The <see cref="P:Infragistics.Documents.Tagging.ClassificationTag.ClassificationType"/> associated with this <see cref="T:Infragistics.Documents.Tagging.ClassificationTag"/></param>
        </member>
        <member name="P:Infragistics.Documents.Tagging.ClassificationTag.ClassificationType">
            <summary>
            Returns the <see cref="P:Infragistics.Documents.Tagging.ClassificationTag.ClassificationType"/> associated with this <see cref="T:Infragistics.Documents.Tagging.ClassificationTag"/> (read only).
            </summary>
        </member>
        <member name="T:Infragistics.Documents.Tagging.ClassificationTagger">
            <summary>
            An <see cref="T:Infragistics.Documents.Tagging.ITagger`1"/> implementation that tags document text with <see cref="T:Infragistics.Documents.Tagging.IClassificationTag"/>s.
            </summary>
            <seealso cref="T:Infragistics.Documents.Tagging.TaggerBase`1"/>
            <seealso cref="T:Infragistics.Documents.Tagging.ITagger`1"/>
            <seealso cref="T:Infragistics.Documents.ClassificationType"/>
            <seealso cref="T:Infragistics.Documents.Tagging.ClassificationTag"/>
            <seealso cref="T:Infragistics.Documents.Tagging.ITag"/>
        </member>
        <member name="T:Infragistics.Documents.Tagging.TaggerBase`1">
            <summary>
            An abstract base class for taggers (i.e., objects that implement <see cref="T:Infragistics.Documents.Tagging.ITagger`1"/>)
            </summary>
            <typeparam name="T">The <see cref="T:Infragistics.Documents.Tagging.ITag"/> derived type that the tagger should create</typeparam>
            <seealso cref="T:Infragistics.Documents.Tagging.ITagger`1"/>
            <seealso cref="T:Infragistics.Documents.Tagging.ITag"/>
            <seealso cref="T:Infragistics.Documents.TextDocument"/>
        </member>
        <member name="T:Infragistics.Documents.Tagging.ITagger`1">
            <summary>
            The interface definition for all objects that provide <see cref="T:Infragistics.Documents.Tagging.ITag"/>s from text.
            </summary>
            <typeparam name="T">The type of <see cref="T:Infragistics.Documents.Tagging.ITag"/>s to provide.</typeparam>
            <seealso cref="T:Infragistics.Documents.Tagging.ITag"/>
            <seealso cref="T:Infragistics.Documents.Tagging.ITaggerProvider"/>
        </member>
        <member name="M:Infragistics.Documents.Tagging.ITagger`1.GetTags(Infragistics.Documents.NormalizedSnapshotSpanCollection)">
            <summary>
            Returns all the tags that intersect the specified spans.
            </summary>
            <param name="spans">A collection of spans over which the tagger looks for overlapping or contained tags</param>
            <returns><see cref="T:Infragistics.Documents.Tagging.ITagSpan`1"/>s for all tags that are contained by or overlap the spans.</returns>
        </member>
        <member name="E:Infragistics.Documents.Tagging.ITagger`1.TagsChanged">
            <summary>
            Raised when tags of type T are added or removed.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Tagging.TaggerBase`1.#ctor(Infragistics.Documents.TextDocument)">
            <summary>
            Constructor
            </summary>
            <param name="document">The <see cref="T:Infragistics.Documents.TextDocument"/> containing the text to be tagged.</param>
        </member>
        <member name="M:Infragistics.Documents.Tagging.TaggerBase`1.OnTagsChanged(Infragistics.Documents.TagsChangedEventArgs)">
            <summary>
            Used to invoke the <see cref="E:Infragistics.Documents.Tagging.TaggerBase`1.TagsChanged"/> event.
            </summary>
            <param name="args">The arguments associated with the event.</param>
            <seealso cref="E:Infragistics.Documents.Tagging.TaggerBase`1.TagsChanged"/>
            <seealso cref="T:Infragistics.Documents.TagsChangedEventArgs"/>
        </member>
        <member name="M:Infragistics.Documents.Tagging.TaggerBase`1.GetTags(Infragistics.Documents.NormalizedSnapshotSpanCollection)">
            <summary>
            Returns all the <see cref="T:Infragistics.Documents.Tagging.ITag"/>s that intersect the specified spans.
            </summary>
            <param name="spans">A collection of spans whose text is examined and tagged with <see cref="T:Infragistics.Documents.Tagging.ITag"/> derived tags.</param>
            <returns><see cref="T:Infragistics.Documents.Tagging.ITagSpan`1"/>s for all <see cref="T:Infragistics.Documents.Tagging.ITokenTag"/>s that are contained by or overlap the spans.</returns>
        </member>
        <member name="P:Infragistics.Documents.Tagging.TaggerBase`1.Document">
            <summary>
            Returns the document associated with this <see cref="T:Infragistics.Documents.Tagging.ITagger`1"/> (read only)
            </summary>
        </member>
        <member name="E:Infragistics.Documents.Tagging.TaggerBase`1.TagsChanged">
            <summary>
            Raised when tags are added or removed.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Tagging.ClassificationTagger.#ctor(Infragistics.Documents.TextDocument)">
            <summary>
            Constructor
            </summary>
            <param name="document"></param>
        </member>
        <member name="M:Infragistics.Documents.Tagging.ClassificationTagger.GetTags(Infragistics.Documents.NormalizedSnapshotSpanCollection)">
            <summary>
            Returns all the <see cref="T:Infragistics.Documents.Tagging.IClassificationTag"/>s that intersect the specified spans.
            </summary>
            <param name="spans">A collection of spans whose text is examined and tagged with <see cref="T:Infragistics.Documents.Tagging.IClassificationTag"/>s.</param>
            <returns><see cref="T:Infragistics.Documents.Tagging.ITagSpan`1"/>s for all <see cref="T:Infragistics.Documents.Tagging.IClassificationTag"/>s that are contained by or overlap the spans.</returns>
        </member>
        <member name="T:Infragistics.Documents.Tagging.ClassificationTaggerProvider">
            <summary>
            Provides a Classification tagger.
            </summary>
            <seealso cref="T:Infragistics.Documents.Tagging.ITag"/>
            <seealso cref="T:Infragistics.Documents.Tagging.ITagger`1"/>
            <seealso cref="T:Infragistics.Documents.Tagging.ITaggerProvider"/>
        </member>
        <member name="T:Infragistics.Documents.Tagging.ITaggerProvider">
            <summary>
            The interface definition for objects create Taggers.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Tagging.ITaggerProvider.CreateTagger``1(Infragistics.Documents.TextDocument)">
            <summary>
            Returns a Tagger that can tag the specified document with tags of type T.
            </summary>
            <param name="document">The document that contains the text to be tagged.</param>
            <returns>A Tagger that can tag the specified document with tags of type T.</returns>
        </member>
        <member name="P:Infragistics.Documents.Tagging.ITaggerProvider.SupportedTagType">
            <summary>
            Returns the <see cref="T:Infragistics.Documents.Tagging.ITag"/> derived type supported by the taggers created by this tagger provider.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Tagging.ClassificationTaggerProvider.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Tagging.ClassificationTaggerProvider.CreateTagger``1(Infragistics.Documents.TextDocument)">
            <summary>
            Returns a Tagger that can tag the specified document with <see cref="T:Infragistics.Documents.Tagging.IClassificationTag"/>s.
            </summary>
            <param name="document">The document that contains the text to be tagged.</param>
            <returns>A Tagger that can tag the specified document with <see cref="T:Infragistics.Documents.Tagging.IClassificationTag"/>s.</returns>
            <seealso cref="T:Infragistics.Documents.Tagging.ITag"/>
            <seealso cref="T:Infragistics.Documents.Tagging.ITagger`1"/>
        </member>
        <member name="P:Infragistics.Documents.Tagging.ClassificationTaggerProvider.SupportedTagType">
            <summary>
            Returns the <see cref="T:Infragistics.Documents.Tagging.ITag"/> derived type supported by the taggers created by this tagger provider.
            </summary>
            <seealso cref="T:Infragistics.Documents.Tagging.ITag"/>
            <seealso cref="T:Infragistics.Documents.Tagging.ITagger`1"/>
        </member>
        <member name="T:Infragistics.Documents.Tagging.DocumentTagAggregator`1">
            <summary>
            An implementation of ITagAggregator for use with <see cref="T:Infragistics.Documents.TextDocument"/>s.
            </summary>
            <typeparam name="T">The type of <see cref="T:Infragistics.Documents.Tagging.ITag"/> to aggregate</typeparam>
            <seealso cref="T:Infragistics.Documents.Tagging.ITagAggregator`1"/>
            <seealso cref="T:Infragistics.Documents.Tagging.ITag"/>
            <seealso cref="T:Infragistics.Documents.TextDocument"/>
        </member>
        <member name="T:Infragistics.Documents.Tagging.ITagAggregator`1">
            <summary>
            The interface definition for objects that process all providers which generate tags of a specific type that fall within a specified list of spans. 
            </summary>
            <typeparam name="T">The type of <see cref="T:Infragistics.Documents.Tagging.ITag"/> to aggregate.</typeparam>
        </member>
        <member name="M:Infragistics.Documents.Tagging.ITagAggregator`1.GetTags(Infragistics.Documents.NormalizedSnapshotSpanCollection)">
            <summary>
            Returns all tags of type T from all providers that overlap or are contained by the specified snapshotSpans collection.
            </summary>
            <param name="spans">A collection of spans over which the aggregator looks for overlapping or contained tags from all providers.</param>
            <returns>ITagSpans for all tags from all providers that are contained by or overlap the spans.</returns>
        </member>
        <member name="E:Infragistics.Documents.Tagging.ITagAggregator`1.TagsChanged">
            <summary>
            Raised when tags of type T are added or removed from all providers.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Tagging.DocumentTagAggregator`1.OnTagsChanged(Infragistics.Documents.TagsChangedEventArgs)">
            <summary>
            Used to invoke the <see cref="E:Infragistics.Documents.Tagging.DocumentTagAggregator`1.TagsChanged"/> event.
            </summary>
            <param name="args">The arguments associated with the event.</param>
            <seealso cref="E:Infragistics.Documents.Tagging.DocumentTagAggregator`1.TagsChanged"/>
            <seealso cref="T:Infragistics.Documents.TagsChangedEventArgs"/>
        </member>
        <member name="M:Infragistics.Documents.Tagging.DocumentTagAggregator`1.GetTags(Infragistics.Documents.NormalizedSnapshotSpanCollection)">
            <summary>
            Returns all tags of type T from all providers that overlap or are contained by the specified snapshotSpans collection.
            </summary>
            <param name="spans">A collection of spans over which the aggregator looks for overlapping or contained tags from all providers.</param>
            <returns><see cref="T:Infragistics.Documents.Tagging.ITagSpan`1"/>s for all tags from all providers that are contained by or overlap the spans.</returns>
        </member>
        <member name="E:Infragistics.Documents.Tagging.DocumentTagAggregator`1.TagsChanged">
            <summary>
            Raised when tags of type T are added or removed from all providers.
            </summary>
        </member>
        <member name="T:Infragistics.Documents.Tagging.IParseErrorTag">
            <summary>
            The interface for all tags that represent errors generated by the <see cref="T:Infragistics.Documents.TextDocument"/> parser.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Tagging.IParseErrorTag.ParseError">
            <summary>
            Returns the <see cref="P:Infragistics.Documents.Tagging.IParseErrorTag.ParseError"/> associated with this <see cref="T:Infragistics.Documents.Tagging.IParseErrorTag"/>.
            </summary>
        </member>
        <member name="T:Infragistics.Documents.Tagging.ITagSpan`1">
            <summary>
            The interface definition for all objects that associate an <see cref="T:Infragistics.Documents.Tagging.ITag"/> with a <see cref="T:Infragistics.Documents.SnapshotSpan"/>
            </summary>
            <typeparam name="T">The type of <see cref="T:Infragistics.Documents.Tagging.ITag"/> associated with the span.</typeparam>
            <seealso cref="T:Infragistics.Documents.Tagging.ITag"/>
            <seealso cref="T:Infragistics.Documents.SnapshotSpan"/>
        </member>
        <member name="P:Infragistics.Documents.Tagging.ITagSpan`1.Span">
            <summary>
            Returns the <see cref="T:Infragistics.Documents.SnapshotSpan"/> associated with the <see cref="T:Infragistics.Documents.Tagging.ITag"/>.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Tagging.ITagSpan`1.Tag">
            <summary>
            Returns the <see cref="T:Infragistics.Documents.Tagging.ITag"/> contained in the associated <see cref="T:Infragistics.Documents.SnapshotSpan"/>.
            </summary>
        </member>
        <member name="T:Infragistics.Documents.Tagging.ITokenTag">
            <summary>
            The interface for all tags that represent tagged <see cref="P:Infragistics.Documents.Tagging.ITokenTag.Token"/>s.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Tagging.ITokenTag.Token">
            <summary>
            Returns the <see cref="P:Infragistics.Documents.Tagging.ITokenTag.Token"/> associated with this <see cref="T:Infragistics.Documents.Tagging.ITokenTag"/>.
            </summary>
        </member>
        <member name="T:Infragistics.Documents.Tagging.ParseErrorTag">
            <summary>
            Basic implementation of <see cref="T:Infragistics.Documents.Tagging.IParseErrorTag"/>.
            </summary>
            <seealso cref="T:Lexing.Regex
            <seealso cref="P:Infragistics.Documents.Tagging.ParseErrorTag.ParseError"/>
            <seealso cref="T:Infragistics.Documents.Tagging.IParseErrorTag"/>
            <seealso cref="T:Infragistics.Documents.Tagging.ParseErrorTagger"/>
            <seealso cref="T:Infragistics.Documents.Tagging.ParseErrorTaggerProvider"/>
        </member>
        <member name="M:Infragistics.Documents.Tagging.ParseErrorTag.#ctor(Lexing.Regex
            <summary>
            Creates a new <see cref="T:Infragistics.Documents.Tagging.ParseErrorTag"/> instance.
            </summary>
            <param name="parseError">The <see cref="P:Infragistics.Documents.Tagging.ParseErrorTag.ParseError"/> associated with this <see cref="T:Infragistics.Documents.Tagging.ParseErrorTag"/></param>
        </member>
        <member name="P:Infragistics.Documents.Tagging.ParseErrorTag.ParseError">
            <summary>
            Returns the <see cref="P:Infragistics.Documents.Tagging.ParseErrorTag.ParseError"/> associated with this <see cref="T:Infragistics.Documents.Tagging.ParseErrorTag"/> (read only).
            </summary>
        </member>
        <member name="T:Infragistics.Documents.Tagging.ParseErrorTagger">
            <summary>
            An <see cref="T:Infragistics.Documents.Tagging.ITagger`1"/> implementation that tags document text with <see cref="T:Infragistics.Documents.Tagging.IParseErrorTag"/>s.
            </summary>
            <seealso cref="T:Infragistics.Documents.Tagging.TaggerBase`1"/>
            <seealso cref="T:Infragistics.Documents.Tagging.ITagger`1"/>
            <seealso cref="T:Lexing.Regex
            <seealso cref="T:Infragistics.Documents.Tagging.ParseErrorTag"/>
            <seealso cref="T:Infragistics.Documents.Tagging.IParseErrorTag"/>
        </member>
        <member name="M:Infragistics.Documents.Tagging.ParseErrorTagger.#ctor(Infragistics.Documents.TextDocument)">
            <summary>
            Constructor
            </summary>
            <param name="document"></param>
        </member>
        <member name="M:Infragistics.Documents.Tagging.ParseErrorTagger.GetTags(Infragistics.Documents.NormalizedSnapshotSpanCollection)">
            <summary>
            Returns all the <see cref="T:Infragistics.Documents.Tagging.IParseErrorTag"/>s that intersect the specified spans.
            </summary>
            <param name="spans">A collection of spans whose text is examined and tagged with <see cref="T:Infragistics.Documents.Tagging.IParseErrorTag"/>s.</param>
            <returns><see cref="T:Infragistics.Documents.Tagging.ITagSpan`1"/>s for all <see cref="T:Infragistics.Documents.Tagging.IParseErrorTag"/>s that are contained by or overlap the spans.</returns>
        </member>
        <member name="T:Infragistics.Documents.Tagging.ParseErrorTaggerProvider">
            <summary>
            Provides a <see cref="T:Lexing.Regex
            </summary>
            <seealso cref="T:Infragistics.Documents.Tagging.IParseErrorTag"/>
            <seealso cref="T:Infragistics.Documents.Tagging.ITagger`1"/>
            <seealso cref="T:Infragistics.Documents.Tagging.ITaggerProvider"/>
            <seealso cref="T:Lexing.Regex
            <seealso cref="T:Infragistics.Documents.Tagging.ParseErrorTagger"/>
        </member>
        <member name="M:Infragistics.Documents.Tagging.ParseErrorTaggerProvider.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Tagging.ParseErrorTaggerProvider.CreateTagger``1(Infragistics.Documents.TextDocument)">
            <summary>
            Returns a Tagger that can tag the specified document with <see cref="T:Infragistics.Documents.Tagging.IParseErrorTag"/>s.
            </summary>
            <param name="document">The document that contains the text to be tagged.</param>
            <returns>A Tagger that can tag the specified document with <see cref="T:Infragistics.Documents.Tagging.IParseErrorTag"/>s.</returns>
            <seealso cref="T:Infragistics.Documents.Tagging.ITag"/>
            <seealso cref="T:Infragistics.Documents.Tagging.ITagger`1"/>
        </member>
        <member name="P:Infragistics.Documents.Tagging.ParseErrorTaggerProvider.SupportedTagType">
            <summary>
            Returns the <see cref="T:Infragistics.Documents.Tagging.ITag"/> derived type supported by the taggers created by this tagger provider.
            </summary>
            <seealso cref="T:Infragistics.Documents.Tagging.ITag"/>
            <seealso cref="T:Infragistics.Documents.Tagging.ITagger`1"/>
        </member>
        <member name="T:Infragistics.Documents.Tagging.TagSpan`1">
            <summary>
            Basic implementation of ITagSpan.
            </summary>
            <typeparam name="T">The <see cref="T:Infragistics.Documents.Tagging.ITag"/> derived type associated with the <see cref="T:Infragistics.Documents.Tagging.TagSpan`1"/></typeparam>
        </member>
        <member name="M:Infragistics.Documents.Tagging.TagSpan`1.#ctor(Infragistics.Documents.SnapshotSpan,`0)">
            <summary>
            Constructor
            </summary>
            <param name="span">The <see cref="T:Infragistics.Documents.SnapshotSpan"/> associated with this <see cref="T:Infragistics.Documents.Tagging.TagSpan`1"/></param>
            <param name="tag">The <see cref="T:Infragistics.Documents.Tagging.ITag"/> derived type associated with this <see cref="T:Infragistics.Documents.Tagging.TagSpan`1"/></param>
        </member>
        <member name="P:Infragistics.Documents.Tagging.TagSpan`1.Span">
            <summary>
            Returns the <see cref="T:Infragistics.Documents.SnapshotSpan"/> associated with this <see cref="T:Infragistics.Documents.Tagging.TagSpan`1"/>.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.Tagging.TagSpan`1.Tag">
            <summary>
            Returns the <see cref="T:Infragistics.Documents.Tagging.ITag"/> associated with this <see cref="T:Infragistics.Documents.Tagging.TagSpan`1"/>.
            </summary>
        </member>
        <member name="T:Infragistics.Documents.Tagging.TokenTag">
            <summary>
            Basic implementation of <see cref="T:Infragistics.Documents.Tagging.ITokenTag"/>.
            </summary>
            <seealso cref="P:Infragistics.Documents.Tagging.TokenTag.Token"/>
            <seealso cref="T:Infragistics.Documents.Tagging.ITokenTag"/>
            <seealso cref="T:Infragistics.Documents.Tagging.TokenTagger"/>
            <seealso cref="T:Infragistics.Documents.Tagging.TokenTaggerProvider"/>
        </member>
        <member name="M:Infragistics.Documents.Tagging.TokenTag.#ctor(Lexing.Regex
            <summary>
            Constructor
            </summary>
            <param name="token">The <see cref="P:Infragistics.Documents.Tagging.TokenTag.Token"/> associated with this <see cref="T:Infragistics.Documents.Tagging.TokenTag"/></param>
        </member>
        <member name="P:Infragistics.Documents.Tagging.TokenTag.Token">
            <summary>
            Returns the <see cref="P:Infragistics.Documents.Tagging.TokenTag.Token"/> associated with this <see cref="T:Infragistics.Documents.Tagging.TokenTag"/>.
            </summary>
        </member>
        <member name="T:Infragistics.Documents.Tagging.TokenTagger">
            <summary>
            An <see cref="T:Infragistics.Documents.Tagging.ITagger`1"/> implementation that tags document text with <see cref="T:Infragistics.Documents.Tagging.ITokenTag"/>s.
            </summary>
            <seealso cref="T:Infragistics.Documents.Tagging.ITagger`1"/>
            <seealso cref="T:Infragistics.Documents.Tagging.TaggerBase`1"/>
            <seealso cref="T:Lexing.Regex
            <seealso cref="T:Infragistics.Documents.Tagging.ITokenTag"/>
            <seealso cref="T:Infragistics.Documents.Tagging.TokenTag"/>
        </member>
        <member name="M:Infragistics.Documents.Tagging.TokenTagger.#ctor(Infragistics.Documents.TextDocument)">
            <summary>
            Constructor
            </summary>
            <param name="document">The <see cref="T:Infragistics.Documents.TextDocument"/> containing the text to be tagged.</param>
        </member>
        <member name="M:Infragistics.Documents.Tagging.TokenTagger.GetTags(Infragistics.Documents.NormalizedSnapshotSpanCollection)">
            <summary>
            Returns all the <see cref="T:Infragistics.Documents.Tagging.ITokenTag"/>s that intersect the specified spans.
            </summary>
            <param name="spans">A collection of spans whose text is examined and tagged with <see cref="T:Infragistics.Documents.Tagging.ITokenTag"/>s.</param>
            <returns><see cref="T:Infragistics.Documents.Tagging.ITagSpan`1"/>s for all <see cref="T:Infragistics.Documents.Tagging.ITokenTag"/>s that are contained by or overlap the spans.</returns>
        </member>
        <member name="T:Infragistics.Documents.Tagging.TokenTaggerProvider">
            <summary>
            Provides a token tagger.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Tagging.TokenTaggerProvider.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Infragistics.Documents.Tagging.TokenTaggerProvider.CreateTagger``1(Infragistics.Documents.TextDocument)">
            <summary>
            Returns a Tagger that can tag the specified document with <see cref="T:Infragistics.Documents.Tagging.ITokenTag"/>s.
            </summary>
            <param name="document">The document that contains the text to be tagged.</param>
            <returns>A Tagger that can tag the specified document with <see cref="T:Infragistics.Documents.Tagging.ITokenTag"/>s.</returns>
        </member>
        <member name="P:Infragistics.Documents.Tagging.TokenTaggerProvider.SupportedTagType">
            <summary>
            Returns the <see cref="T:Infragistics.Documents.Tagging.ITag"/> derived type supported by the taggers created by this tagger provider.
            </summary>
        </member>
        <member name="T:Infragistics.Documents.TextChange">
            <summary>
            Describes a single contiguous text change operation on a
            <see cref="T:Infragistics.Documents.TextDocument">TextDocument</see>.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.TextChange.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.TextChange.LengthDelta">
            <summary>
            Returns the difference in the length between the
            <see cref="T:Infragistics.Documents.TextDocumentSnapshot">TextDocumentSnapshot</see>
            which was the current snapshot immediately before this change and the new snapshot.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.TextChange.LineCountDelta">
            <summary>
            Returns the difference in the number of lines in the snapshot
            resulting from this change.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.TextChange.NewLength">
            <summary>
            Returns the length of the document after the change was applied.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.TextChange.NewText">
            <summary>
            Returns the text that replaced the
            <see cref="P:Infragistics.Documents.TextChange.OldText">OldText</see>
            </summary>
        </member>
        <member name="P:Infragistics.Documents.TextChange.NewSpan">
            <summary>
            Returns the span of the text change in the snapshot
            immediately after the change.
            </summary>
            <remarks>
            <p class="body">
            This span is empty for a pure deletion. Its start position differs from that of the
            <see cref="P:Infragistics.Documents.TextChange.OldSpan">NewSpan</see>
            only when there is more than one TextChange included in moving from one
            snapshot to the next.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.Documents.TextChange.OldLength">
            <summary>
            Returns the length of the document before the change was applied.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.TextChange.OldText">
            <summary>
            Returns the text that was replaced.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.TextChange.OldSpan">
            <summary>
            Returns the span of the text change in the snapshot
            immediately before the change.
            </summary>
            <remarks>
            <p class="body">
            This span is empty for a pure insertion. Its start position differs from that of the
            <see cref="P:Infragistics.Documents.TextChange.NewSpan">NewSpan</see>
            only when there is more than one TextChange included in moving from one
            snapshot to the next.
            </p>
            </remarks>
        </member>
        <member name="T:Infragistics.Documents.TextDocumentSnapshot">
            <summary>
            Represents the entire state (i.e. version) of a <see cref="T:Infragistics.Documents.TextDocument"/>.
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> Every time a change is made to the document a new snapshot is created. Each snapshot is thread-safe and immutable.</para>
            </remarks>
            <seealso cref="T:Infragistics.Documents.TextDocument"/>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentSnapshot.CreateScanner">
            <summary>
            Creates a new instance of a <see cref="T:Infragistics.Documents.TextDocumentSnapshotScanner"/>
            </summary>
            <returns>The new instance of the scanner for this snapshot.</returns>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentSnapshot.Find(Infragistics.Documents.TextSearchCriteria,System.Int32,System.Boolean,System.Nullable{Lexing.Regex
            <summary>
            Finds an instance of text in the span that matches the search criteria.
            </summary>
            <param name="criteria">The search criteria</param>
            <param name="startOffset">The start offset relative to the beginning of the document.</param>
            <param name="wrapIfNotFound">if true continue the search by wrapping if the end is reached without a match.</param>
            <param name="spanToSearch">An optional span to limit the search to.</param>
            <returns>A <see cref="T:Infragistics.Documents.TextSearchResultInfo">TextSearchResultInfo</see> object containing the results of the operation.</returns>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentSnapshot.FindAll(Infragistics.Documents.TextSearchCriteria,System.Nullable{Lexing.Regex
            <summary>
            Finds all instances of text in the text span that matches the search criteria.
            </summary>
            <param name="criteria">The search criteria</param>
            <param name="spanToSearch">On optional span to limit the search to.</param>
            <returns>A <see cref="T:Infragistics.Documents.TextSearchResultInfo">TextSearchResultInfo</see> object containing the results of the operation.</returns>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentSnapshot.GetLines(System.Int32,System.Boolean)">
            <summary>
            Returns a object that can enumerate <see cref="T:Infragistics.Documents.SnapshotLineInfo"/>s.
            </summary>
            <param name="startLineIndex">The zero-based line offset.</param>
            <param name="enumerateBackwards">True to enumerate backwards from the startLineIndex.</param>
            <returns>A forward or backward enumerator</returns>
            <remarks>
            <para class="note"><b>Note:</b> even though the snapshot is thread-safe, the enumerator is not. Therefore this method should be called on the same thread that is using it (i.e. each thread accessing an enumerator should create its own). Trying to access the properties and methods of an enumerator created on another thread will raise an InvalidOperationException.</para>
            </remarks>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentSnapshot.GetText">
            <summary>
            Returns the string representation of this snapshot.
            </summary>
            <returns>The string representation of this snapshot.</returns>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentSnapshot.GetText(System.Int32)">
            <summary>
            Returns the specified substring.
            </summary>
            <param name="start">The zero-based position of the first character in the string to be returned.</param>
            <returns>The specified substring.</returns>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentSnapshot.GetText(System.Int32,System.Int32)">
            <summary>
            Returns the specified substring.
            </summary>
            <param name="start">The zero-based position of the first character in the string to be returned.</param>
            <param name="length">The length of the string to be returned.</param>
            <returns>The specified substring.</returns>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentSnapshot.GetText(Lexing.Regex
            <summary>
            Returns the specified substring.
            </summary>
            <param name="span">The span of the text.</param>
            <returns>The specified substring.</returns>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentSnapshot.GetTokens(Lexing.Regex
            <summary>
            Returns a object that can enumerate <see cref="T:Lexing.Regex
            </summary>
            <param name="span">The span of text to restrict the token enumeration.</param>
            <param name="filter">A function that can dcide which tokens get returned from the enumerator.</param>
            <param name="enumerateBackwards">True to enumerate backwards from the end of the span to the beginning of the span.</param>
            <returns>A forward or backward enumerator of Tokens</returns>
            <remarks>
            <para class="note"><b>Note:</b> even though the snapshot is thread-safe, the enumerator is not. Therefore this method should be called on the same thread that is using it (i.e. each thread accessing an enumerator should create its own). Trying to access the properties and methods of an enumerator created on another thread will raise an InvalidOperationException.</para>
            </remarks>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentSnapshot.GetTokens(Infragistics.Documents.SnapshotSpan,System.Func{Lexing.Regex
            <summary>
            Returns a object that can enumerate <see cref="T:Lexing.Regex
            </summary>
            <param name="span">The span of text to restrict the token enumeration.</param>
            <param name="filter">A function that can dcide which tokens get returned from the enumerator.</param>
            <param name="enumerateBackwards">True to enumerate backwards from the end of the span to the beginning of the span.</param>
            <returns>A forward or backward enumerator of Tokens</returns>
            <remarks>
            <para class="note"><b>Note:</b> even though the snapshot is thread-safe, the enumerator is not. Therefore this method should be called on the same thread that is using it (i.e. each thread accessing an enumerator should create its own). Trying to access the properties and methods of an enumerator created on another thread will raise an InvalidOperationException.</para>
            </remarks>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentSnapshot.GetTokens(System.Int32,System.Func{Lexing.Regex
            <summary>
            Returns a object that can enumerate <see cref="T:Lexing.Regex
            </summary>
            <param name="startOffset">The offset at which to start the token enumeration.</param>
            <param name="filter">A function that can dcide which tokens get returned from the enumerator.</param>
            <param name="enumerateBackwards">True to enumerate backwards from the end of the span to the beginning of the span.</param>
            <returns>A forward or backward enumerator of Tokens</returns>
            <remarks>
            <para class="note"><b>Note:</b> even though the snapshot is thread-safe, the enumerator is not. Therefore this method should be called on the same thread that is using it (i.e. each thread accessing an enumerator should create its own). Trying to access the properties and methods of an enumerator created on another thread will raise an InvalidOperationException.</para>
            </remarks>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentSnapshot.IsCompatibleWith(Infragistics.Documents.TextDocumentSnapshot)">
            <summary>
            Determines if 2 snapshots are compatible (i.e. have the same root buffer)
            </summary>
            <param name="other">The snapshot to compare.</param>
            <remarks>
            <para class="note"><b>Note:</b> if snapshots are not compatible then <see cref="T:Infragistics.Documents.SnapshotPoint">SnapshotPoints</see> and <see cref="T:Infragistics.Documents.SnapshotSpan">SnapshotSpans</see> can not be translated between them. 
            Calling either <see cref="M:Infragistics.Documents.SnapshotPoint.TranslateTo(Infragistics.Documents.TextDocumentSnapshot,Infragistics.Documents.PointTrackingMode)">SnapshotPoint.TranslateTo</see> or <see cref="M:Infragistics.Documents.SnapshotSpan.TranslateTo(Infragistics.Documents.TextDocumentSnapshot,Infragistics.Documents.SpanTrackingMode)">SnapshotSpan.TranslateTo</see> with an incompatible snapshot will raise an exception.</para>
            </remarks>
            <returns>true if both snapshots have the same root buffer, otherwise false.</returns>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentSnapshot.LineFromIndex(System.Int32)">
            <summary>
            Returns the corresponding <see cref="T:Infragistics.Documents.SnapshotLineInfo"/> from a zero-based index.
            </summary>
            <param name="index">The zero-based index of the line..</param>
            <returns>The corresponding <see cref="T:Infragistics.Documents.SnapshotLineInfo"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If index is less than zero or greater than or equal to the <see cref="P:Infragistics.Documents.TextDocumentSnapshot.LineCount"/>.</exception>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentSnapshot.LineFromOffset(System.Int32)">
            <summary>
            Returns the corresponding <see cref="T:Infragistics.Documents.SnapshotLineInfo"/> from a zero-based offset value.
            </summary>
            <param name="offset">The zero-based offset relative to the beginning of the document for this snapshot.</param>
            <returns>The corresponding <see cref="T:Infragistics.Documents.SnapshotLineInfo"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If offset is less than zero or greater than the document's overall length - 1.</exception>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentSnapshot.LineIndexFromOffset(System.Int32)">
            <summary>
            Returns the corresponding zero-based line index from a zero-based offset value.
            </summary>
            <param name="offset">The zero-based offset relative to the beginning of the document for this snapshot.</param>
            <returns>The corresponding zero based line index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If offset is less than zero or greater than the document's overall length.</exception>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentSnapshot.LocationFromOffset(System.Int32)">
            <summary>
            Returns the corresponding line and character location from a zero-based offset value.
            </summary>
            <param name="offset">The zero-based offset relative to the beginning of the document for this snapshot.</param>
            <returns>The corresponding TextLocation struct.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If offset is less than zero or greater than the document's overall length - 1.</exception>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentSnapshot.OffsetFromLocation(Lexing.Regex
            <summary>
            Returns the corresponding overall zero-based offset from a line and character location.
            </summary>
            <param name="location">The zero-based line and character numbers for a character location in this snapshot.</param>
            <returns>The corresponding overall zero-based offset from the beginning of the document..</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If resulting offset is less than zero or greater than the document's overall length - 1.</exception>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentSnapshot.TokenFromOffset(System.Int32)">
            <summary>
            Returns the corresponding <see cref="T:Lexing.Regex
            </summary>
            <param name="offset">The zero-based offset relative to the beginning of the document for this token.</param>
            <returns>The corresponding <see cref="T:Lexing.Regex
            <exception cref="T:System.ArgumentOutOfRangeException">If offset is less than zero or greater than the document's overall length.</exception>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentSnapshot.WordFromOffset(System.Int32)">
            <summary>
            Returns the <see cref="T:Infragistics.Documents.Word"/> from a zero-based offset value.
            </summary>
            <param name="offset">The zero-based offset relative to the beginning of the document for this snapshot.</param>
            <returns>The corresponding <see cref="T:Infragistics.Documents.Word"/> or null if the offset is not within a word.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If offset is less than zero or greater than the document's overall length - 1.</exception>
        </member>
        <member name="P:Infragistics.Documents.TextDocumentSnapshot.Document">
            <summary>
            Returns the associated <see cref="T:Infragistics.Documents.TextDocument"/> (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Documents.TextDocumentSnapshot.Item(System.Int32)">
            <summary>
            Returns the character at the specified position(read-only).
            </summary>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="P:Infragistics.Documents.TextDocumentSnapshot.Length">
            <summary>
            Returns the length of the snapshot in characters (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Documents.TextDocumentSnapshot.LineCount">
            <summary>
            Returns the number of <see cref="T:Infragistics.Documents.SnapshotLineInfo">lines</see>  in the shapshot (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Documents.TextDocumentSnapshot.TokenCount">
            <summary>
            Returns the number of <see cref="T:Lexing.Regex
            </summary>
        </member>
        <member name="P:Infragistics.Documents.TextDocumentSnapshot.Version">
            <summary>
            Returns the version of the document that this snapshot represents (read-only)
            </summary>
        </member>
        <member name="T:Infragistics.Documents.TextDocumentSnapshotScanner">
            <summary>
            Exposes methods for scanning through a <see cref="T:Infragistics.Documents.TextDocumentSnapshot">snapshot</see> of a <see cref="T:Infragistics.Documents.TextDocument"/> 
            </summary>
            <remarks>
            <para class="body">This class targets a specific instance of a <see cref="T:Infragistics.Documents.TextDocumentSnapshot">snapshot</see> and is created via the snapshot’s <see cref="M:Infragistics.Documents.TextDocumentSnapshot.CreateScanner">CreateScanner</see> method. It is used for efficiently scanning thru the snapshot’s lines, tokens and words.</para>
            <para class="body">The <see cref="P:Infragistics.Documents.TextDocumentSnapshotScanner.CurrentOffset"/> property is used to scan thru the snapshot. It can either be set explicitly (it defaults to zero) or via the <see cref="M:Infragistics.Documents.TextDocumentSnapshotScanner.SeekToStart"/>, <see cref="M:Infragistics.Documents.TextDocumentSnapshotScanner.SeekToEnd"/>, <see cref="M:Infragistics.Documents.TextDocumentSnapshotScanner.SeekToLine(Infragistics.Documents.LineScanType)"/>, <see cref="M:Infragistics.Documents.TextDocumentSnapshotScanner.SeekToToken(Infragistics.Documents.TokenScanType,System.Func{Lexing.Regex
            <para clas="note"><b>Note:</b> even though the <see cref="T:Infragistics.Documents.TextDocumentSnapshot">snapshot</see> that it targets is thread-safe, the scanner is not. Therefore it should be created on the same thread that it is used on (i.e. each thread accessing a scanner should create its own). Trying to access the properties and methods of a scanner created on another thread will raise an InvalidOperationException.</para>
            </remarks>
            <seealso cref="T:Infragistics.Documents.TextDocument"/>
            <seealso cref="T:Infragistics.Documents.TextDocumentSnapshot"/>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentSnapshotScanner.PeekNextToken(System.Func{Lexing.Regex
            <summary>
            Peeks ahead and returns the next token without changing the <see cref="P:Infragistics.Documents.TextDocumentSnapshotScanner.CurrentOffset"/>.
            </summary>
            <param name="filter">An optional filter function to bypass certain tokens.</param>
            <returns>The next token if successful, otherwise null</returns>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentSnapshotScanner.PeekNextWord">
            <summary>
            Peeks ahead and returns the next word without changing the <see cref="P:Infragistics.Documents.TextDocumentSnapshotScanner.CurrentOffset"/>.
            </summary>
            <returns>The next word if successful, otherwise null</returns>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentSnapshotScanner.PeekPreviousToken(System.Func{Lexing.Regex
            <summary>
            Peeks backward and returns the previous token without changing the <see cref="P:Infragistics.Documents.TextDocumentSnapshotScanner.CurrentOffset"/>.
            </summary>
            <param name="filter">An optional filter function to bypass certain tokens.</param>
            <returns>The previou token if successful, otherwise null</returns>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentSnapshotScanner.PeekPreviousWord">
            <summary>
            Peeks backward and returns the previous word without changing the <see cref="P:Infragistics.Documents.TextDocumentSnapshotScanner.CurrentOffset"/>.
            </summary>
            <returns>The previou word if successful, otherwise null</returns>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentSnapshotScanner.SeekToEnd">
            <summary>
            Sets the <see cref="P:Infragistics.Documents.TextDocumentSnapshotScanner.CurrentOffset"/> to the length minus one.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentSnapshotScanner.SeekToLine(System.Int32)">
            <summary>
            Sets the <see cref="P:Infragistics.Documents.TextDocumentSnapshotScanner.CurrentOffset"/> to the beginning of a line.
            </summary>
            <param name="lineIndex">The zero-based index of the line.</param>
            <returns>True if successful, otherwise false</returns>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentSnapshotScanner.SeekToLine(Infragistics.Documents.LineScanType)">
            <summary>
            Sets the <see cref="P:Infragistics.Documents.TextDocumentSnapshotScanner.CurrentOffset"/> to the beginning or end of a line.
            </summary>
            <param name="scanType">The relative line position.</param>
            <returns>True if successful, otherwise false</returns>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentSnapshotScanner.SeekToStart">
            <summary>
            Sets the <see cref="P:Infragistics.Documents.TextDocumentSnapshotScanner.CurrentOffset"/> to the zero.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentSnapshotScanner.SeekToToken(Infragistics.Documents.TokenScanType,System.Func{Lexing.Regex
            <summary>
            Sets the <see cref="P:Infragistics.Documents.TextDocumentSnapshotScanner.CurrentOffset"/> to the beginning or end of a <see cref="T:Lexing.Regex
            </summary>
            <param name="scanType">The relative token position.</param>
            <param name="filter">An optional filter function to bypass certain tokens.</param>
            <returns>True if successful, otherwise false</returns>
            <exception cref="T:System.InvalidOperationException">if a filter is suppled and scanType is either 'CurrentTokenStart' or 'CurrentTokenEnd'.</exception>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentSnapshotScanner.SeekToWord(Infragistics.Documents.WordScanType)">
            <summary>
            Sets the <see cref="P:Infragistics.Documents.TextDocumentSnapshotScanner.CurrentOffset"/> to the beginning or end of a <see cref="T:Infragistics.Documents.Word">Word</see> within a <see cref="T:Lexing.Regex
            </summary>
            <param name="scanType">The relative word position.</param>
            <returns>True if successful, otherwise false</returns>
        </member>
        <member name="P:Infragistics.Documents.TextDocumentSnapshotScanner.CurrentCharacter">
            <summary>
            Returns the character at the <see cref="P:Infragistics.Documents.TextDocumentSnapshotScanner.CurrentOffset"/> (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Documents.TextDocumentSnapshotScanner.CurrentLine">
            <summary>
            Returns the <see cref="T:Infragistics.Documents.SnapshotLineInfo">Line</see> containing the <see cref="P:Infragistics.Documents.TextDocumentSnapshotScanner.CurrentOffset"/> (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Documents.TextDocumentSnapshotScanner.CurrentOffset">
            <summary>
            Returns/sets the zero-based character offset.
            </summary>
        </member>
        <member name="P:Infragistics.Documents.TextDocumentSnapshotScanner.CurrentToken">
            <summary>
            Returns the <see cref="T:Lexing.Regex
            </summary>
        </member>
        <member name="P:Infragistics.Documents.TextDocumentSnapshotScanner.CurrentWord">
            <summary>
            Returns the <see cref="T:Infragistics.Documents.Word">Word</see> at the <see cref="P:Infragistics.Documents.TextDocumentSnapshotScanner.CurrentOffset"/> (read-only).
            </summary>
            <value>The word at the current offset or null if <see cref="P:Infragistics.Documents.TextDocumentSnapshotScanner.CurrentOffset"/> is not within a word.</value>
        </member>
        <member name="P:Infragistics.Documents.TextDocumentSnapshotScanner.Snapshot">
            <summary>
            Returns the snapshot that this scanner was created for (read-only)
            </summary>
            <seealso cref="M:Infragistics.Documents.TextDocumentSnapshot.CreateScanner"/>
        </member>
        <member name="T:Infragistics.Documents.TextDocumentVersion">
            <summary>
            An object that identifies a specific version of a <see cref="T:Infragistics.Documents.TextDocument"/> including a list of the changes that were made to create the next version.
            </summary>
            <seealso cref="P:Infragistics.Documents.TextDocumentSnapshot.Version"/>
        </member>
        <member name="P:Infragistics.Documents.TextDocumentVersion.Changes">
            <summary>
            Returns a read-only collection of the <see cref="T:Infragistics.Documents.TextChange">changes</see> that were applied to get to the next version.
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> for the <see cref="P:Infragistics.Documents.TextDocument.CurrentSnapshot"/> this property will return null.</para>
            </remarks>
            <seealso cref="P:Infragistics.Documents.TextDocumentVersion.ChangeSource"/>
            <seealso cref="T:Infragistics.Documents.TextChange"/>
        </member>
        <member name="P:Infragistics.Documents.TextDocumentVersion.ChangeSource">
            <summary>
            Returns the source of the changes that were applied to get to the next version (read-only).
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> for the <see cref="P:Infragistics.Documents.TextDocument.CurrentSnapshot"/> this property will return null.</para>
            </remarks>
            <seealso cref="P:Infragistics.Documents.TextDocumentVersion.Changes"/>
        </member>
        <member name="P:Infragistics.Documents.TextDocumentVersion.Length">
            <summary>
            Returns the overall length of this version of the document (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Documents.TextDocumentVersion.NextVersion">
            <summary>
            Returns the next version of this document (read-only)
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> for the <see cref="P:Infragistics.Documents.TextDocument.CurrentSnapshot"/> this property will return null.</para>
            </remarks>
        </member>
        <member name="P:Infragistics.Documents.TextDocumentVersion.VersionNumber">
            <summary>
            Returns the version number for this version (read-only)
            </summary>
        </member>
        <member name="T:Infragistics.Documents.TextSearchCriteria">
            <summary>
            Defines the criteria to use when performing a find operation on text within a <see cref="T:Infragistics.Documents.TextDocument"/>
            </summary>
            <seealso cref="M:Infragistics.Documents.TextDocument.FindReplace(System.String,Infragistics.Documents.TextSearchCriteria,System.Int32,System.Boolean)">FindReplace</seealso>
            <seealso cref="M:Infragistics.Documents.TextDocument.FindReplaceAll(Infragistics.Documents.TextSearchCriteria,System.String,System.Nullable{Lexing.Regex
            <seealso cref="M:Infragistics.Documents.TextDocumentSnapshot.Find(Infragistics.Documents.TextSearchCriteria,System.Int32,System.Boolean,System.Nullable{Lexing.Regex
            <seealso cref="M:Infragistics.Documents.TextDocumentSnapshot.FindAll(Infragistics.Documents.TextSearchCriteria,System.Nullable{Lexing.Regex
        </member>
        <member name="M:Infragistics.Documents.TextSearchCriteria.#ctor(System.Boolean,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Documents.TextSearchCriteria"/>
            </summary>
            <param name="wholeWordOnly">If true bypass partial word matches.</param>
            <param name="regexPattern">The regular expression pattern to use.</param>
            <param name="regexOptions">the regular expression options to use..</param>
        </member>
        <member name="M:Infragistics.Documents.TextSearchCriteria.#ctor(System.Boolean,System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Documents.TextSearchCriteria"/>
            </summary>
            <param name="wholeWordOnly">If true bypass partial word matches.</param>
            <param name="regexPattern">The regular expression pattern to use.</param>
            <param name="isCaseSensitive">If true will match only if the case matches.</param>
            <param name="searchBackwards">If true will serach up in the document.</param>
        </member>
        <member name="M:Infragistics.Documents.TextSearchCriteria.#ctor(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Documents.TextSearchCriteria"/>
            </summary>
            <param name="textToFind">The text to search for.</param>
            <param name="wholeWordOnly">If true bypass partial word matches.</param>
            <param name="isCaseSensitive">If true will match only if the case matches.</param>
            <param name="searchBackwards">If true will serach up in the document.</param>
        </member>
        <member name="P:Infragistics.Documents.TextSearchCriteria.IsCaseSensitive">
            <summary>
            Returns whether the find operation is case sensitive (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Documents.TextSearchCriteria.RegexOptions">
            <summary>
            Returns the regex options to use for the search (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Documents.TextSearchCriteria.RegexPattern">
            <summary>
            Returns the regex pattern to use for the search (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Documents.TextSearchCriteria.SearchBackwards">
            <summary>
            Returns the search direction (.i.e. whether the search should look forwards or backwards in the text) (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Documents.TextSearchCriteria.TextToFind">
            <summary>
            Returns the text to search for (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Documents.TextSearchCriteria.WholeWordOnly">
            <summary>
            Returns whether to ignore partial matches within words (read-only).
            </summary>
        </member>
        <member name="T:Infragistics.Documents.TextSearchResult">
            <summary>
            Represents a single match in a find or replace operation on text within a <see cref="T:Infragistics.Documents.TextDocument"/>
            </summary>
            <seealso cref="M:Infragistics.Documents.TextDocument.FindReplace(System.String,Infragistics.Documents.TextSearchCriteria,System.Int32,System.Boolean)">FindReplace</seealso>
            <seealso cref="M:Infragistics.Documents.TextDocument.FindReplaceAll(Infragistics.Documents.TextSearchCriteria,System.String,System.Nullable{Lexing.Regex
            <seealso cref="M:Infragistics.Documents.TextDocumentSnapshot.Find(Infragistics.Documents.TextSearchCriteria,System.Int32,System.Boolean,System.Nullable{Lexing.Regex
            <seealso cref="M:Infragistics.Documents.TextDocumentSnapshot.FindAll(Infragistics.Documents.TextSearchCriteria,System.Nullable{Lexing.Regex
        </member>
        <member name="M:Infragistics.Documents.TextSearchResult.Equals(System.Object)">
            <summary>
            Compares the specified object to this object to see if they are equivalent.
            </summary>
            <param name="obj">The object to compare</param>
            <returns>True if the objects are equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.Documents.TextSearchResult.GetHashCode">
            <summary>
            Returns the hash code of the object.
            </summary>
            <returns>A hash code for this instance</returns>
        </member>
        <member name="M:Infragistics.Documents.TextSearchResult.op_Equality(Infragistics.Documents.TextSearchResult,Infragistics.Documents.TextSearchResult)">
            <summary>
            Compares the values of two <see cref="T:Infragistics.Documents.TextSearchResult"/> structures for equality
            </summary>
            <param name="result1">The first structure</param>
            <param name="result2">The other structure</param>
            <returns>true if the two instances are equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.Documents.TextSearchResult.op_Inequality(Infragistics.Documents.TextSearchResult,Infragistics.Documents.TextSearchResult)">
            <summary>
            Compares the values of two <see cref="T:Infragistics.Documents.TextSearchResult"/> structures for inequality
            </summary>
            <param name="result1">The first structure</param>
            <param name="result2">The other structure</param>
            <returns>true if the two instances are not equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.Documents.TextSearchResult.ToString">
            <summary>
            Returns a string representation of the object.
            </summary>
            <returns>A string that represents this <see cref="T:Infragistics.Documents.TextSearchResult"/></returns>
        </member>
        <member name="P:Infragistics.Documents.TextSearchResult.SpanFound">
            <summary>
            Returns the span of the text that was found (read-only)
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> in the case of a replace operation, the snapshot of <b>SpanFound</b> will reference the snapshot before the change was applied while the snapshot of <b>SpanReplaced</b> will reference the snapshot after the change was applied.</para>
            </remarks>
            <seealso cref="P:Infragistics.Documents.TextSearchResult.SpanReplaced"/>
            <seealso cref="P:Infragistics.Documents.TextSearchResultInfo.Results"/>
            <seealso cref="M:Infragistics.Documents.TextDocument.FindReplace(System.String,Infragistics.Documents.TextSearchCriteria,System.Int32,System.Boolean)"/>
            <seealso cref="M:Infragistics.Documents.TextDocument.FindReplaceAll(Infragistics.Documents.TextSearchCriteria,System.String,System.Nullable{Lexing.Regex
            <seealso cref="M:Infragistics.Documents.TextDocumentSnapshot.Find(Infragistics.Documents.TextSearchCriteria,System.Int32,System.Boolean,System.Nullable{Lexing.Regex
            <seealso cref="M:Infragistics.Documents.TextDocumentSnapshot.FindAll(Infragistics.Documents.TextSearchCriteria,System.Nullable{Lexing.Regex
        </member>
        <member name="P:Infragistics.Documents.TextSearchResult.SpanReplaced">
            <summary>
            Returns the span of the text that was replaced or null if no text was replaced (read-only)
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> in the case of a replace operation, the snapshot of <b>SpanFound</b> will reference the snapshot before the change was applied while the snapshot of <b>SpanReplaced</b> will reference the snapshot after the change was applied.</para>
            </remarks>
            <seealso cref="P:Infragistics.Documents.TextSearchResult.SpanFound"/>
            <seealso cref="P:Infragistics.Documents.TextSearchResultInfo.Results"/>
            <seealso cref="M:Infragistics.Documents.TextDocument.FindReplace(System.String,Infragistics.Documents.TextSearchCriteria,System.Int32,System.Boolean)"/>
            <seealso cref="M:Infragistics.Documents.TextDocument.FindReplaceAll(Infragistics.Documents.TextSearchCriteria,System.String,System.Nullable{Lexing.Regex
            <seealso cref="M:Infragistics.Documents.TextDocumentSnapshot.Find(Infragistics.Documents.TextSearchCriteria,System.Int32,System.Boolean,System.Nullable{Lexing.Regex
            <seealso cref="M:Infragistics.Documents.TextDocumentSnapshot.FindAll(Infragistics.Documents.TextSearchCriteria,System.Nullable{Lexing.Regex
        </member>
        <member name="T:Infragistics.Documents.TextSearchResultInfo">
            <summary>
            Represents the results of a find or replace operation on text within a <see cref="T:Infragistics.Documents.TextDocument"/>
            </summary>
            <seealso cref="M:Infragistics.Documents.TextDocument.FindReplace(System.String,Infragistics.Documents.TextSearchCriteria,System.Int32,System.Boolean)">FindReplace</seealso>
            <seealso cref="M:Infragistics.Documents.TextDocument.FindReplaceAll(Infragistics.Documents.TextSearchCriteria,System.String,System.Nullable{Lexing.Regex
            <seealso cref="M:Infragistics.Documents.TextDocumentSnapshot.Find(Infragistics.Documents.TextSearchCriteria,System.Int32,System.Boolean,System.Nullable{Lexing.Regex
            <seealso cref="M:Infragistics.Documents.TextDocumentSnapshot.FindAll(Infragistics.Documents.TextSearchCriteria,System.Nullable{Lexing.Regex
        </member>
        <member name="P:Infragistics.Documents.TextSearchResultInfo.Criteria">
            <summary>
            Returns the criteria use for the search operation (read-only)
            </summary>
        </member>
        <member name="P:Infragistics.Documents.TextSearchResultInfo.Results">
            <summary>
            Returns a read-only collection of the TextSearchResult instances.
            </summary>
            <seealso cref="T:Infragistics.Documents.TextSearchResult"/>
        </member>
        <member name="T:Infragistics.Documents.IndentOutdentUndoUnit">
            <summary>
            Class for an undo/redo of an indent or outdent operation on a TextDocument.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.IndentOutdentUndoUnit.Execute(Infragistics.Undo.UndoExecuteContext)">
            <summary>
            Used to perform the associated action.
            </summary>
            <param name="executeInfo">Provides information about the undo/redo operation being executed.</param>
            <returns>Returns true if some action was taken. Otherwise false is returned. In either case the object was removed from the undo stack.</returns>
        </member>
        <member name="M:Infragistics.Documents.IndentOutdentUndoUnit.GetDescription(Infragistics.Undo.UndoHistoryItemType,System.Boolean)">
            <summary>
            Returns a string representation of the action based on whether this is for an undo or redo operation.
            </summary>
            <param name="itemType">The type of history for which the description is being requested.</param>
            <param name="detailed">A boolean indicating if a detailed description should be returned. For example, when false one may return "Typing" but for verbose one may return "Typing 'qwerty'".</param>
        </member>
        <member name="M:Infragistics.Documents.IndentOutdentUndoUnit.Merge(Infragistics.Undo.UndoMergeContext)">
            <summary>
            Used to allow multiple consecutive undo units to be merged into a single operation.
            </summary>
            <param name="mergeInfo">Provides information about the unit to evaluate for a merge operation</param>
            <returns>Returns an enumeration used to provide identify how the unit was merged.</returns>
        </member>
        <member name="P:Infragistics.Documents.IndentOutdentUndoUnit.Target">
            <summary>
            Returns the target object that will be affected by the <see cref="T:Infragistics.Undo.UndoUnit"/>
            </summary>
        </member>
        <member name="T:Infragistics.Documents.ReplaceAllUndoUnit">
            <summary>
            Class for an undo/redo replace all operation on a TextDocument.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.ReplaceAllUndoUnit.Execute(Infragistics.Undo.UndoExecuteContext)">
            <summary>
            Used to perform the associated action.
            </summary>
            <param name="executeInfo">Provides information about the undo/redo operation being executed.</param>
            <returns>Returns true if some action was taken. Otherwise false is returned. In either case the object was removed from the undo stack.</returns>
        </member>
        <member name="M:Infragistics.Documents.ReplaceAllUndoUnit.GetDescription(Infragistics.Undo.UndoHistoryItemType,System.Boolean)">
            <summary>
            Returns a string representation of the action based on whether this is for an undo or redo operation.
            </summary>
            <param name="itemType">The type of history for which the description is being requested.</param>
            <param name="detailed">A boolean indicating if a detailed description should be returned. For example, when false one may return "Typing" but for verbose one may return "Typing 'qwerty'".</param>
        </member>
        <member name="M:Infragistics.Documents.ReplaceAllUndoUnit.Merge(Infragistics.Undo.UndoMergeContext)">
            <summary>
            Used to allow multiple consecutive undo units to be merged into a single operation.
            </summary>
            <param name="mergeInfo">Provides information about the unit to evaluate for a merge operation</param>
            <returns>Returns an enumeration used to provide identify how the unit was merged.</returns>
        </member>
        <member name="P:Infragistics.Documents.ReplaceAllUndoUnit.Target">
            <summary>
            Returns the target object that will be affected by the <see cref="T:Infragistics.Undo.UndoUnit"/>
            </summary>
        </member>
        <member name="M:Infragistics.Documents.ReplaceAllUndoUnit.TextFound.GetHashCode">
            <summary>
            Returns the hash code of the structure.
            </summary>
            <returns>A hash code for this instance</returns>
        </member>
        <member name="M:Infragistics.Documents.ReplaceAllUndoUnit.TextFound.Equals(System.Object)">
            <summary>
            Compares the specified object to this object to see if they are equivalent.
            </summary>
            <param name="obj">The object to compare</param>
            <returns>True if the objects are equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.Documents.ReplaceAllUndoUnit.TextFound.op_GreaterThan(Infragistics.Documents.ReplaceAllUndoUnit.TextFound,Infragistics.Documents.ReplaceAllUndoUnit.TextFound)">
            <summary>
            Compares the relative values of two <see cref="T:Infragistics.Documents.ReplaceAllUndoUnit.TextFound"/> structures 
            </summary>
            <param name="span">The first structure</param>
            <param name="other">The other structure</param>
            <returns>true if the span is greater than other</returns>
        </member>
        <member name="M:Infragistics.Documents.ReplaceAllUndoUnit.TextFound.op_LessThan(Infragistics.Documents.ReplaceAllUndoUnit.TextFound,Infragistics.Documents.ReplaceAllUndoUnit.TextFound)">
            <summary>
            Compares the relative values of two <see cref="T:Infragistics.Documents.ReplaceAllUndoUnit.TextFound"/> structures 
            </summary>
            <param name="span">The first structure</param>
            <param name="other">The other structure</param>
            <returns>true if the span is less than other</returns>
        </member>
        <member name="M:Infragistics.Documents.ReplaceAllUndoUnit.TextFound.op_Equality(Infragistics.Documents.ReplaceAllUndoUnit.TextFound,Infragistics.Documents.ReplaceAllUndoUnit.TextFound)">
            <summary>
            Compares the values of two <see cref="T:Infragistics.Documents.ReplaceAllUndoUnit.TextFound"/> structures for equality
            </summary>
            <param name="span1">The first structure</param>
            <param name="span2">The other structure</param>
            <returns>true if the two instances are equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.Documents.ReplaceAllUndoUnit.TextFound.op_Inequality(Infragistics.Documents.ReplaceAllUndoUnit.TextFound,Infragistics.Documents.ReplaceAllUndoUnit.TextFound)">
            <summary>
            Compares the values of two <see cref="T:Infragistics.Documents.ReplaceAllUndoUnit.TextFound"/> structures for inequality
            </summary>
            <param name="span1">The first structure</param>
            <param name="span2">The other structure</param>
            <returns>true if the two instances are not equal; otherwise false</returns>
        </member>
        <member name="M:Infragistics.Documents.ReplaceAllUndoUnit.TextFound.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Infragistics.Documents.TextDocumentUndoUnit">
            <summary>
            Class for an undo/redo operation on a TextDocument.
            </summary>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentUndoUnit.Execute(Infragistics.Undo.UndoExecuteContext)">
            <summary>
            Used to perform the associated action.
            </summary>
            <param name="executeInfo">Provides information about the undo/redo operation being executed.</param>
            <returns>Returns true if some action was taken. Otherwise false is returned. In either case the object was removed from the undo stack.</returns>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentUndoUnit.GetDescription(Infragistics.Undo.UndoHistoryItemType,System.Boolean)">
            <summary>
            Returns a string representation of the action based on whether this is for an undo or redo operation.
            </summary>
            <param name="itemType">The type of history for which the description is being requested.</param>
            <param name="detailed">A boolean indicating if a detailed description should be returned. For example, when false one may return "Typing" but for verbose one may return "Typing 'qwerty'".</param>
        </member>
        <member name="M:Infragistics.Documents.TextDocumentUndoUnit.Merge(Infragistics.Undo.UndoMergeContext)">
            <summary>
            Used to allow multiple consecutive undo units to be merged into a single operation.
            </summary>
            <param name="mergeInfo">Provides information about the unit to evaluate for a merge operation</param>
            <returns>Returns an enumeration used to provide identify how the unit was merged.</returns>
        </member>
        <member name="P:Infragistics.Documents.TextDocumentUndoUnit.Target">
            <summary>
            Returns the target object that will be affected by the <see cref="T:Infragistics.Undo.UndoUnit"/>
            </summary>
        </member>
    </members>
</doc>
